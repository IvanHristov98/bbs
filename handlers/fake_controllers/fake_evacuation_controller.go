// Code generated by counterfeiter. DO NOT EDIT.
package fake_controllers

import (
	"net/http"
	"sync"

	"code.cloudfoundry.org/bbs/handlers"
	"code.cloudfoundry.org/lager"
)

type FakeEvacuationController struct {
	RemoveEvacuatingActualLRPStub        func(logger lager.Logger, w http.ResponseWriter, req *http.Request) error
	removeEvacuatingActualLRPMutex       sync.RWMutex
	removeEvacuatingActualLRPArgsForCall []struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}
	removeEvacuatingActualLRPReturns struct {
		result1 error
	}
	removeEvacuatingActualLRPReturnsOnCall map[int]struct {
		result1 error
	}
	EvacuateClaimedActualLRPStub        func(logger lager.Logger, w http.ResponseWriter, req *http.Request) (error, bool)
	evacuateClaimedActualLRPMutex       sync.RWMutex
	evacuateClaimedActualLRPArgsForCall []struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}
	evacuateClaimedActualLRPReturns struct {
		result1 error
		result2 bool
	}
	evacuateClaimedActualLRPReturnsOnCall map[int]struct {
		result1 error
		result2 bool
	}
	EvacuateCrashedActualLRPStub        func(logger lager.Logger, w http.ResponseWriter, req *http.Request) (error, bool)
	evacuateCrashedActualLRPMutex       sync.RWMutex
	evacuateCrashedActualLRPArgsForCall []struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}
	evacuateCrashedActualLRPReturns struct {
		result1 error
		result2 bool
	}
	evacuateCrashedActualLRPReturnsOnCall map[int]struct {
		result1 error
		result2 bool
	}
	EvacuateRunningActualLRPStub        func(logger lager.Logger, w http.ResponseWriter, req *http.Request) (error, bool)
	evacuateRunningActualLRPMutex       sync.RWMutex
	evacuateRunningActualLRPArgsForCall []struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}
	evacuateRunningActualLRPReturns struct {
		result1 error
		result2 bool
	}
	evacuateRunningActualLRPReturnsOnCall map[int]struct {
		result1 error
		result2 bool
	}
	EvacuateStoppedActualLRPStub        func(logger lager.Logger, w http.ResponseWriter, req *http.Request) (error, bool)
	evacuateStoppedActualLRPMutex       sync.RWMutex
	evacuateStoppedActualLRPArgsForCall []struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}
	evacuateStoppedActualLRPReturns struct {
		result1 error
		result2 bool
	}
	evacuateStoppedActualLRPReturnsOnCall map[int]struct {
		result1 error
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEvacuationController) RemoveEvacuatingActualLRP(logger lager.Logger, w http.ResponseWriter, req *http.Request) error {
	fake.removeEvacuatingActualLRPMutex.Lock()
	ret, specificReturn := fake.removeEvacuatingActualLRPReturnsOnCall[len(fake.removeEvacuatingActualLRPArgsForCall)]
	fake.removeEvacuatingActualLRPArgsForCall = append(fake.removeEvacuatingActualLRPArgsForCall, struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}{logger, w, req})
	fake.recordInvocation("RemoveEvacuatingActualLRP", []interface{}{logger, w, req})
	fake.removeEvacuatingActualLRPMutex.Unlock()
	if fake.RemoveEvacuatingActualLRPStub != nil {
		return fake.RemoveEvacuatingActualLRPStub(logger, w, req)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeEvacuatingActualLRPReturns.result1
}

func (fake *FakeEvacuationController) RemoveEvacuatingActualLRPCallCount() int {
	fake.removeEvacuatingActualLRPMutex.RLock()
	defer fake.removeEvacuatingActualLRPMutex.RUnlock()
	return len(fake.removeEvacuatingActualLRPArgsForCall)
}

func (fake *FakeEvacuationController) RemoveEvacuatingActualLRPArgsForCall(i int) (lager.Logger, http.ResponseWriter, *http.Request) {
	fake.removeEvacuatingActualLRPMutex.RLock()
	defer fake.removeEvacuatingActualLRPMutex.RUnlock()
	return fake.removeEvacuatingActualLRPArgsForCall[i].logger, fake.removeEvacuatingActualLRPArgsForCall[i].w, fake.removeEvacuatingActualLRPArgsForCall[i].req
}

func (fake *FakeEvacuationController) RemoveEvacuatingActualLRPReturns(result1 error) {
	fake.RemoveEvacuatingActualLRPStub = nil
	fake.removeEvacuatingActualLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEvacuationController) RemoveEvacuatingActualLRPReturnsOnCall(i int, result1 error) {
	fake.RemoveEvacuatingActualLRPStub = nil
	if fake.removeEvacuatingActualLRPReturnsOnCall == nil {
		fake.removeEvacuatingActualLRPReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeEvacuatingActualLRPReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEvacuationController) EvacuateClaimedActualLRP(logger lager.Logger, w http.ResponseWriter, req *http.Request) (error, bool) {
	fake.evacuateClaimedActualLRPMutex.Lock()
	ret, specificReturn := fake.evacuateClaimedActualLRPReturnsOnCall[len(fake.evacuateClaimedActualLRPArgsForCall)]
	fake.evacuateClaimedActualLRPArgsForCall = append(fake.evacuateClaimedActualLRPArgsForCall, struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}{logger, w, req})
	fake.recordInvocation("EvacuateClaimedActualLRP", []interface{}{logger, w, req})
	fake.evacuateClaimedActualLRPMutex.Unlock()
	if fake.EvacuateClaimedActualLRPStub != nil {
		return fake.EvacuateClaimedActualLRPStub(logger, w, req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evacuateClaimedActualLRPReturns.result1, fake.evacuateClaimedActualLRPReturns.result2
}

func (fake *FakeEvacuationController) EvacuateClaimedActualLRPCallCount() int {
	fake.evacuateClaimedActualLRPMutex.RLock()
	defer fake.evacuateClaimedActualLRPMutex.RUnlock()
	return len(fake.evacuateClaimedActualLRPArgsForCall)
}

func (fake *FakeEvacuationController) EvacuateClaimedActualLRPArgsForCall(i int) (lager.Logger, http.ResponseWriter, *http.Request) {
	fake.evacuateClaimedActualLRPMutex.RLock()
	defer fake.evacuateClaimedActualLRPMutex.RUnlock()
	return fake.evacuateClaimedActualLRPArgsForCall[i].logger, fake.evacuateClaimedActualLRPArgsForCall[i].w, fake.evacuateClaimedActualLRPArgsForCall[i].req
}

func (fake *FakeEvacuationController) EvacuateClaimedActualLRPReturns(result1 error, result2 bool) {
	fake.EvacuateClaimedActualLRPStub = nil
	fake.evacuateClaimedActualLRPReturns = struct {
		result1 error
		result2 bool
	}{result1, result2}
}

func (fake *FakeEvacuationController) EvacuateClaimedActualLRPReturnsOnCall(i int, result1 error, result2 bool) {
	fake.EvacuateClaimedActualLRPStub = nil
	if fake.evacuateClaimedActualLRPReturnsOnCall == nil {
		fake.evacuateClaimedActualLRPReturnsOnCall = make(map[int]struct {
			result1 error
			result2 bool
		})
	}
	fake.evacuateClaimedActualLRPReturnsOnCall[i] = struct {
		result1 error
		result2 bool
	}{result1, result2}
}

func (fake *FakeEvacuationController) EvacuateCrashedActualLRP(logger lager.Logger, w http.ResponseWriter, req *http.Request) (error, bool) {
	fake.evacuateCrashedActualLRPMutex.Lock()
	ret, specificReturn := fake.evacuateCrashedActualLRPReturnsOnCall[len(fake.evacuateCrashedActualLRPArgsForCall)]
	fake.evacuateCrashedActualLRPArgsForCall = append(fake.evacuateCrashedActualLRPArgsForCall, struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}{logger, w, req})
	fake.recordInvocation("EvacuateCrashedActualLRP", []interface{}{logger, w, req})
	fake.evacuateCrashedActualLRPMutex.Unlock()
	if fake.EvacuateCrashedActualLRPStub != nil {
		return fake.EvacuateCrashedActualLRPStub(logger, w, req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evacuateCrashedActualLRPReturns.result1, fake.evacuateCrashedActualLRPReturns.result2
}

func (fake *FakeEvacuationController) EvacuateCrashedActualLRPCallCount() int {
	fake.evacuateCrashedActualLRPMutex.RLock()
	defer fake.evacuateCrashedActualLRPMutex.RUnlock()
	return len(fake.evacuateCrashedActualLRPArgsForCall)
}

func (fake *FakeEvacuationController) EvacuateCrashedActualLRPArgsForCall(i int) (lager.Logger, http.ResponseWriter, *http.Request) {
	fake.evacuateCrashedActualLRPMutex.RLock()
	defer fake.evacuateCrashedActualLRPMutex.RUnlock()
	return fake.evacuateCrashedActualLRPArgsForCall[i].logger, fake.evacuateCrashedActualLRPArgsForCall[i].w, fake.evacuateCrashedActualLRPArgsForCall[i].req
}

func (fake *FakeEvacuationController) EvacuateCrashedActualLRPReturns(result1 error, result2 bool) {
	fake.EvacuateCrashedActualLRPStub = nil
	fake.evacuateCrashedActualLRPReturns = struct {
		result1 error
		result2 bool
	}{result1, result2}
}

func (fake *FakeEvacuationController) EvacuateCrashedActualLRPReturnsOnCall(i int, result1 error, result2 bool) {
	fake.EvacuateCrashedActualLRPStub = nil
	if fake.evacuateCrashedActualLRPReturnsOnCall == nil {
		fake.evacuateCrashedActualLRPReturnsOnCall = make(map[int]struct {
			result1 error
			result2 bool
		})
	}
	fake.evacuateCrashedActualLRPReturnsOnCall[i] = struct {
		result1 error
		result2 bool
	}{result1, result2}
}

func (fake *FakeEvacuationController) EvacuateRunningActualLRP(logger lager.Logger, w http.ResponseWriter, req *http.Request) (error, bool) {
	fake.evacuateRunningActualLRPMutex.Lock()
	ret, specificReturn := fake.evacuateRunningActualLRPReturnsOnCall[len(fake.evacuateRunningActualLRPArgsForCall)]
	fake.evacuateRunningActualLRPArgsForCall = append(fake.evacuateRunningActualLRPArgsForCall, struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}{logger, w, req})
	fake.recordInvocation("EvacuateRunningActualLRP", []interface{}{logger, w, req})
	fake.evacuateRunningActualLRPMutex.Unlock()
	if fake.EvacuateRunningActualLRPStub != nil {
		return fake.EvacuateRunningActualLRPStub(logger, w, req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evacuateRunningActualLRPReturns.result1, fake.evacuateRunningActualLRPReturns.result2
}

func (fake *FakeEvacuationController) EvacuateRunningActualLRPCallCount() int {
	fake.evacuateRunningActualLRPMutex.RLock()
	defer fake.evacuateRunningActualLRPMutex.RUnlock()
	return len(fake.evacuateRunningActualLRPArgsForCall)
}

func (fake *FakeEvacuationController) EvacuateRunningActualLRPArgsForCall(i int) (lager.Logger, http.ResponseWriter, *http.Request) {
	fake.evacuateRunningActualLRPMutex.RLock()
	defer fake.evacuateRunningActualLRPMutex.RUnlock()
	return fake.evacuateRunningActualLRPArgsForCall[i].logger, fake.evacuateRunningActualLRPArgsForCall[i].w, fake.evacuateRunningActualLRPArgsForCall[i].req
}

func (fake *FakeEvacuationController) EvacuateRunningActualLRPReturns(result1 error, result2 bool) {
	fake.EvacuateRunningActualLRPStub = nil
	fake.evacuateRunningActualLRPReturns = struct {
		result1 error
		result2 bool
	}{result1, result2}
}

func (fake *FakeEvacuationController) EvacuateRunningActualLRPReturnsOnCall(i int, result1 error, result2 bool) {
	fake.EvacuateRunningActualLRPStub = nil
	if fake.evacuateRunningActualLRPReturnsOnCall == nil {
		fake.evacuateRunningActualLRPReturnsOnCall = make(map[int]struct {
			result1 error
			result2 bool
		})
	}
	fake.evacuateRunningActualLRPReturnsOnCall[i] = struct {
		result1 error
		result2 bool
	}{result1, result2}
}

func (fake *FakeEvacuationController) EvacuateStoppedActualLRP(logger lager.Logger, w http.ResponseWriter, req *http.Request) (error, bool) {
	fake.evacuateStoppedActualLRPMutex.Lock()
	ret, specificReturn := fake.evacuateStoppedActualLRPReturnsOnCall[len(fake.evacuateStoppedActualLRPArgsForCall)]
	fake.evacuateStoppedActualLRPArgsForCall = append(fake.evacuateStoppedActualLRPArgsForCall, struct {
		logger lager.Logger
		w      http.ResponseWriter
		req    *http.Request
	}{logger, w, req})
	fake.recordInvocation("EvacuateStoppedActualLRP", []interface{}{logger, w, req})
	fake.evacuateStoppedActualLRPMutex.Unlock()
	if fake.EvacuateStoppedActualLRPStub != nil {
		return fake.EvacuateStoppedActualLRPStub(logger, w, req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evacuateStoppedActualLRPReturns.result1, fake.evacuateStoppedActualLRPReturns.result2
}

func (fake *FakeEvacuationController) EvacuateStoppedActualLRPCallCount() int {
	fake.evacuateStoppedActualLRPMutex.RLock()
	defer fake.evacuateStoppedActualLRPMutex.RUnlock()
	return len(fake.evacuateStoppedActualLRPArgsForCall)
}

func (fake *FakeEvacuationController) EvacuateStoppedActualLRPArgsForCall(i int) (lager.Logger, http.ResponseWriter, *http.Request) {
	fake.evacuateStoppedActualLRPMutex.RLock()
	defer fake.evacuateStoppedActualLRPMutex.RUnlock()
	return fake.evacuateStoppedActualLRPArgsForCall[i].logger, fake.evacuateStoppedActualLRPArgsForCall[i].w, fake.evacuateStoppedActualLRPArgsForCall[i].req
}

func (fake *FakeEvacuationController) EvacuateStoppedActualLRPReturns(result1 error, result2 bool) {
	fake.EvacuateStoppedActualLRPStub = nil
	fake.evacuateStoppedActualLRPReturns = struct {
		result1 error
		result2 bool
	}{result1, result2}
}

func (fake *FakeEvacuationController) EvacuateStoppedActualLRPReturnsOnCall(i int, result1 error, result2 bool) {
	fake.EvacuateStoppedActualLRPStub = nil
	if fake.evacuateStoppedActualLRPReturnsOnCall == nil {
		fake.evacuateStoppedActualLRPReturnsOnCall = make(map[int]struct {
			result1 error
			result2 bool
		})
	}
	fake.evacuateStoppedActualLRPReturnsOnCall[i] = struct {
		result1 error
		result2 bool
	}{result1, result2}
}

func (fake *FakeEvacuationController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeEvacuatingActualLRPMutex.RLock()
	defer fake.removeEvacuatingActualLRPMutex.RUnlock()
	fake.evacuateClaimedActualLRPMutex.RLock()
	defer fake.evacuateClaimedActualLRPMutex.RUnlock()
	fake.evacuateCrashedActualLRPMutex.RLock()
	defer fake.evacuateCrashedActualLRPMutex.RUnlock()
	fake.evacuateRunningActualLRPMutex.RLock()
	defer fake.evacuateRunningActualLRPMutex.RUnlock()
	fake.evacuateStoppedActualLRPMutex.RLock()
	defer fake.evacuateStoppedActualLRPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEvacuationController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.EvacuationController = new(FakeEvacuationController)
