// This file was generated by counterfeiter
package eventfakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/events"
	"code.cloudfoundry.org/bbs/models"
)

type FakeHub struct {
	SubscribeStub        func() (events.EventSource, error)
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct{}
	subscribeReturns struct {
		result1 events.EventSource
		result2 error
	}
	SubscribeForCellStub        func(cellID string) (events.EventSource, error)
	subscribeForCellMutex       sync.RWMutex
	subscribeForCellArgsForCall []struct {
		cellID string
	}
	subscribeForCellReturns struct {
		result1 events.EventSource
		result2 error
	}
	EmitStub        func(models.Event)
	emitMutex       sync.RWMutex
	emitArgsForCall []struct {
		arg1 models.Event
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns struct {
		result1 error
	}
	RegisterCallbackStub        func(func(count int))
	registerCallbackMutex       sync.RWMutex
	registerCallbackArgsForCall []struct {
		arg1 func(count int)
	}
	UnregisterCallbackStub        func()
	unregisterCallbackMutex       sync.RWMutex
	unregisterCallbackArgsForCall []struct{}
}

func (fake *FakeHub) Subscribe() (events.EventSource, error) {
	fake.subscribeMutex.Lock()
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct{}{})
	fake.subscribeMutex.Unlock()
	if fake.SubscribeStub != nil {
		return fake.SubscribeStub()
	} else {
		return fake.subscribeReturns.result1, fake.subscribeReturns.result2
	}
}

func (fake *FakeHub) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeHub) SubscribeReturns(result1 events.EventSource, result2 error) {
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 events.EventSource
		result2 error
	}{result1, result2}
}

func (fake *FakeHub) SubscribeForCell(cellID string) (events.EventSource, error) {
	fake.subscribeForCellMutex.Lock()
	fake.subscribeForCellArgsForCall = append(fake.subscribeForCellArgsForCall, struct {
		cellID string
	}{cellID})
	fake.subscribeForCellMutex.Unlock()
	if fake.SubscribeForCellStub != nil {
		return fake.SubscribeForCellStub(cellID)
	} else {
		return fake.subscribeForCellReturns.result1, fake.subscribeForCellReturns.result2
	}
}

func (fake *FakeHub) SubscribeForCellCallCount() int {
	fake.subscribeForCellMutex.RLock()
	defer fake.subscribeForCellMutex.RUnlock()
	return len(fake.subscribeForCellArgsForCall)
}

func (fake *FakeHub) SubscribeForCellArgsForCall(i int) string {
	fake.subscribeForCellMutex.RLock()
	defer fake.subscribeForCellMutex.RUnlock()
	return fake.subscribeForCellArgsForCall[i].cellID
}

func (fake *FakeHub) SubscribeForCellReturns(result1 events.EventSource, result2 error) {
	fake.SubscribeForCellStub = nil
	fake.subscribeForCellReturns = struct {
		result1 events.EventSource
		result2 error
	}{result1, result2}
}

func (fake *FakeHub) Emit(arg1 models.Event) {
	fake.emitMutex.Lock()
	fake.emitArgsForCall = append(fake.emitArgsForCall, struct {
		arg1 models.Event
	}{arg1})
	fake.emitMutex.Unlock()
	if fake.EmitStub != nil {
		fake.EmitStub(arg1)
	}
}

func (fake *FakeHub) EmitCallCount() int {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return len(fake.emitArgsForCall)
}

func (fake *FakeHub) EmitArgsForCall(i int) models.Event {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return fake.emitArgsForCall[i].arg1
}

func (fake *FakeHub) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeHub) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeHub) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHub) RegisterCallback(arg1 func(count int)) {
	fake.registerCallbackMutex.Lock()
	fake.registerCallbackArgsForCall = append(fake.registerCallbackArgsForCall, struct {
		arg1 func(count int)
	}{arg1})
	fake.registerCallbackMutex.Unlock()
	if fake.RegisterCallbackStub != nil {
		fake.RegisterCallbackStub(arg1)
	}
}

func (fake *FakeHub) RegisterCallbackCallCount() int {
	fake.registerCallbackMutex.RLock()
	defer fake.registerCallbackMutex.RUnlock()
	return len(fake.registerCallbackArgsForCall)
}

func (fake *FakeHub) RegisterCallbackArgsForCall(i int) func(count int) {
	fake.registerCallbackMutex.RLock()
	defer fake.registerCallbackMutex.RUnlock()
	return fake.registerCallbackArgsForCall[i].arg1
}

func (fake *FakeHub) UnregisterCallback() {
	fake.unregisterCallbackMutex.Lock()
	fake.unregisterCallbackArgsForCall = append(fake.unregisterCallbackArgsForCall, struct{}{})
	fake.unregisterCallbackMutex.Unlock()
	if fake.UnregisterCallbackStub != nil {
		fake.UnregisterCallbackStub()
	}
}

func (fake *FakeHub) UnregisterCallbackCallCount() int {
	fake.unregisterCallbackMutex.RLock()
	defer fake.unregisterCallbackMutex.RUnlock()
	return len(fake.unregisterCallbackArgsForCall)
}

var _ events.Hub = new(FakeHub)
