// This file was generated by counterfeiter
package migrationfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bbs/db/etcd"
	"github.com/cloudfoundry-incubator/bbs/migration"
	"github.com/pivotal-golang/lager"
)

type FakeMigration struct {
	VersionStub        func() int64
	versionMutex       sync.RWMutex
	versionArgsForCall []struct{}
	versionReturns struct {
		result1 int64
	}
	UpStub        func(logger lager.Logger, storeClient etcd.StoreClient) error
	upMutex       sync.RWMutex
	upArgsForCall []struct {
		logger      lager.Logger
		storeClient etcd.StoreClient
	}
	upReturns struct {
		result1 error
	}
	DownStub        func(logger lager.Logger, storeClient etcd.StoreClient) error
	downMutex       sync.RWMutex
	downArgsForCall []struct {
		logger      lager.Logger
		storeClient etcd.StoreClient
	}
	downReturns struct {
		result1 error
	}
}

func (fake *FakeMigration) Version() int64 {
	fake.versionMutex.Lock()
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct{}{})
	fake.versionMutex.Unlock()
	if fake.VersionStub != nil {
		return fake.VersionStub()
	} else {
		return fake.versionReturns.result1
	}
}

func (fake *FakeMigration) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeMigration) VersionReturns(result1 int64) {
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 int64
	}{result1}
}

func (fake *FakeMigration) Up(logger lager.Logger, storeClient etcd.StoreClient) error {
	fake.upMutex.Lock()
	fake.upArgsForCall = append(fake.upArgsForCall, struct {
		logger      lager.Logger
		storeClient etcd.StoreClient
	}{logger, storeClient})
	fake.upMutex.Unlock()
	if fake.UpStub != nil {
		return fake.UpStub(logger, storeClient)
	} else {
		return fake.upReturns.result1
	}
}

func (fake *FakeMigration) UpCallCount() int {
	fake.upMutex.RLock()
	defer fake.upMutex.RUnlock()
	return len(fake.upArgsForCall)
}

func (fake *FakeMigration) UpArgsForCall(i int) (lager.Logger, etcd.StoreClient) {
	fake.upMutex.RLock()
	defer fake.upMutex.RUnlock()
	return fake.upArgsForCall[i].logger, fake.upArgsForCall[i].storeClient
}

func (fake *FakeMigration) UpReturns(result1 error) {
	fake.UpStub = nil
	fake.upReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigration) Down(logger lager.Logger, storeClient etcd.StoreClient) error {
	fake.downMutex.Lock()
	fake.downArgsForCall = append(fake.downArgsForCall, struct {
		logger      lager.Logger
		storeClient etcd.StoreClient
	}{logger, storeClient})
	fake.downMutex.Unlock()
	if fake.DownStub != nil {
		return fake.DownStub(logger, storeClient)
	} else {
		return fake.downReturns.result1
	}
}

func (fake *FakeMigration) DownCallCount() int {
	fake.downMutex.RLock()
	defer fake.downMutex.RUnlock()
	return len(fake.downArgsForCall)
}

func (fake *FakeMigration) DownArgsForCall(i int) (lager.Logger, etcd.StoreClient) {
	fake.downMutex.RLock()
	defer fake.downMutex.RUnlock()
	return fake.downArgsForCall[i].logger, fake.downArgsForCall[i].storeClient
}

func (fake *FakeMigration) DownReturns(result1 error) {
	fake.DownStub = nil
	fake.downReturns = struct {
		result1 error
	}{result1}
}

var _ migration.Migration = new(FakeMigration)
