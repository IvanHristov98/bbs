// This file was generated by counterfeiter
package fakes

import (
	"crypto/cipher"
	"sync"

	"github.com/cloudfoundry-incubator/bbs/encryption"
)

type FakeKey struct {
	LabelStub        func() string
	labelMutex       sync.RWMutex
	labelArgsForCall []struct{}
	labelReturns struct {
		result1 string
	}
	BlockStub        func() cipher.Block
	blockMutex       sync.RWMutex
	blockArgsForCall []struct{}
	blockReturns struct {
		result1 cipher.Block
	}
}

func (fake *FakeKey) Label() string {
	fake.labelMutex.Lock()
	fake.labelArgsForCall = append(fake.labelArgsForCall, struct{}{})
	fake.labelMutex.Unlock()
	if fake.LabelStub != nil {
		return fake.LabelStub()
	} else {
		return fake.labelReturns.result1
	}
}

func (fake *FakeKey) LabelCallCount() int {
	fake.labelMutex.RLock()
	defer fake.labelMutex.RUnlock()
	return len(fake.labelArgsForCall)
}

func (fake *FakeKey) LabelReturns(result1 string) {
	fake.LabelStub = nil
	fake.labelReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeKey) Block() cipher.Block {
	fake.blockMutex.Lock()
	fake.blockArgsForCall = append(fake.blockArgsForCall, struct{}{})
	fake.blockMutex.Unlock()
	if fake.BlockStub != nil {
		return fake.BlockStub()
	} else {
		return fake.blockReturns.result1
	}
}

func (fake *FakeKey) BlockCallCount() int {
	fake.blockMutex.RLock()
	defer fake.blockMutex.RUnlock()
	return len(fake.blockArgsForCall)
}

func (fake *FakeKey) BlockReturns(result1 cipher.Block) {
	fake.BlockStub = nil
	fake.blockReturns = struct {
		result1 cipher.Block
	}{result1}
}

var _ encryption.Key = new(FakeKey)
