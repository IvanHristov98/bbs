// Code generated by protoc-gen-gogo.
// source: volume_mount.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeprecatedBindMountMode int32

const (
	DeprecatedBindMountMode_RO DeprecatedBindMountMode = 0
	DeprecatedBindMountMode_RW DeprecatedBindMountMode = 1
)

var DeprecatedBindMountMode_name = map[int32]string{
	0: "RO",
	1: "RW",
}
var DeprecatedBindMountMode_value = map[string]int32{
	"RO": 0,
	"RW": 1,
}

func (x DeprecatedBindMountMode) Enum() *DeprecatedBindMountMode {
	p := new(DeprecatedBindMountMode)
	*p = x
	return p
}
func (x DeprecatedBindMountMode) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(DeprecatedBindMountMode_name, int32(x))
}
func (x *DeprecatedBindMountMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeprecatedBindMountMode_value, data, "DeprecatedBindMountMode")
	if err != nil {
		return err
	}
	*x = DeprecatedBindMountMode(value)
	return nil
}
func (DeprecatedBindMountMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorVolumeMount, []int{0}
}

type SharedDevice struct {
	VolumeId    string `protobuf:"bytes,1,req,name=volume_id,json=volumeId" json:"volume_id"`
	MountConfig string `protobuf:"bytes,2,opt,name=mount_config,json=mountConfig" json:"mount_config"`
}

func (m *SharedDevice) Reset()                    { *m = SharedDevice{} }
func (*SharedDevice) ProtoMessage()               {}
func (*SharedDevice) Descriptor() ([]byte, []int) { return fileDescriptorVolumeMount, []int{0} }

func (m *SharedDevice) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *SharedDevice) GetMountConfig() string {
	if m != nil {
		return m.MountConfig
	}
	return ""
}

type VolumeMount struct {
	DeprecatedVolumeId string                  `protobuf:"bytes,2,opt,name=deprecated_volume_id,json=deprecatedVolumeId" json:"deprecated_volume_id"`
	DeprecatedMode     DeprecatedBindMountMode `protobuf:"varint,4,opt,name=deprecated_mode,json=deprecatedMode,enum=models.DeprecatedBindMountMode" json:"deprecated_mode"`
	DeprecatedConfig   []byte                  `protobuf:"bytes,5,opt,name=deprecated_config,json=deprecatedConfig" json:"deprecated_config"`
	Driver             string                  `protobuf:"bytes,1,opt,name=driver" json:"driver"`
	ContainerDir       string                  `protobuf:"bytes,3,opt,name=container_dir,json=containerDir" json:"container_dir"`
	Mode               string                  `protobuf:"bytes,6,opt,name=mode" json:"mode"`
	// Types that are valid to be assigned to Device:
	//	*VolumeMount_Shared
	Device isVolumeMount_Device `protobuf_oneof:"device"`
}

func (m *VolumeMount) Reset()                    { *m = VolumeMount{} }
func (*VolumeMount) ProtoMessage()               {}
func (*VolumeMount) Descriptor() ([]byte, []int) { return fileDescriptorVolumeMount, []int{1} }

type isVolumeMount_Device interface {
	isVolumeMount_Device()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VolumeMount_Shared struct {
	Shared *SharedDevice `protobuf:"bytes,7,opt,name=shared,oneof"`
}

func (*VolumeMount_Shared) isVolumeMount_Device() {}

func (m *VolumeMount) GetDevice() isVolumeMount_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *VolumeMount) GetDeprecatedVolumeId() string {
	if m != nil {
		return m.DeprecatedVolumeId
	}
	return ""
}

func (m *VolumeMount) GetDeprecatedMode() DeprecatedBindMountMode {
	if m != nil {
		return m.DeprecatedMode
	}
	return DeprecatedBindMountMode_RO
}

func (m *VolumeMount) GetDeprecatedConfig() []byte {
	if m != nil {
		return m.DeprecatedConfig
	}
	return nil
}

func (m *VolumeMount) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *VolumeMount) GetContainerDir() string {
	if m != nil {
		return m.ContainerDir
	}
	return ""
}

func (m *VolumeMount) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *VolumeMount) GetShared() *SharedDevice {
	if x, ok := m.GetDevice().(*VolumeMount_Shared); ok {
		return x.Shared
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VolumeMount) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VolumeMount_OneofMarshaler, _VolumeMount_OneofUnmarshaler, _VolumeMount_OneofSizer, []interface{}{
		(*VolumeMount_Shared)(nil),
	}
}

func _VolumeMount_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VolumeMount)
	// device
	switch x := m.Device.(type) {
	case *VolumeMount_Shared:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Shared); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VolumeMount.Device has unexpected type %T", x)
	}
	return nil
}

func _VolumeMount_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VolumeMount)
	switch tag {
	case 7: // device.shared
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SharedDevice)
		err := b.DecodeMessage(msg)
		m.Device = &VolumeMount_Shared{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VolumeMount_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VolumeMount)
	// device
	switch x := m.Device.(type) {
	case *VolumeMount_Shared:
		s := proto.Size(x.Shared)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VolumePlacement struct {
	DriverNames []string `protobuf:"bytes,1,rep,name=driver_names,json=driverNames" json:"driver_names"`
}

func (m *VolumePlacement) Reset()                    { *m = VolumePlacement{} }
func (*VolumePlacement) ProtoMessage()               {}
func (*VolumePlacement) Descriptor() ([]byte, []int) { return fileDescriptorVolumeMount, []int{2} }

func (m *VolumePlacement) GetDriverNames() []string {
	if m != nil {
		return m.DriverNames
	}
	return nil
}

func init() {
	proto.RegisterType((*SharedDevice)(nil), "models.SharedDevice")
	proto.RegisterType((*VolumeMount)(nil), "models.VolumeMount")
	proto.RegisterType((*VolumePlacement)(nil), "models.VolumePlacement")
	proto.RegisterEnum("models.DeprecatedBindMountMode", DeprecatedBindMountMode_name, DeprecatedBindMountMode_value)
}
func (x DeprecatedBindMountMode) String() string {
	s, ok := DeprecatedBindMountMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SharedDevice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SharedDevice)
	if !ok {
		that2, ok := that.(SharedDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VolumeId != that1.VolumeId {
		return false
	}
	if this.MountConfig != that1.MountConfig {
		return false
	}
	return true
}
func (this *VolumeMount) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VolumeMount)
	if !ok {
		that2, ok := that.(VolumeMount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeprecatedVolumeId != that1.DeprecatedVolumeId {
		return false
	}
	if this.DeprecatedMode != that1.DeprecatedMode {
		return false
	}
	if !bytes.Equal(this.DeprecatedConfig, that1.DeprecatedConfig) {
		return false
	}
	if this.Driver != that1.Driver {
		return false
	}
	if this.ContainerDir != that1.ContainerDir {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if that1.Device == nil {
		if this.Device != nil {
			return false
		}
	} else if this.Device == nil {
		return false
	} else if !this.Device.Equal(that1.Device) {
		return false
	}
	return true
}
func (this *VolumeMount_Shared) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VolumeMount_Shared)
	if !ok {
		that2, ok := that.(VolumeMount_Shared)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Shared.Equal(that1.Shared) {
		return false
	}
	return true
}
func (this *VolumePlacement) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VolumePlacement)
	if !ok {
		that2, ok := that.(VolumePlacement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.DriverNames) != len(that1.DriverNames) {
		return false
	}
	for i := range this.DriverNames {
		if this.DriverNames[i] != that1.DriverNames[i] {
			return false
		}
	}
	return true
}
func (this *SharedDevice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.SharedDevice{")
	s = append(s, "VolumeId: "+fmt.Sprintf("%#v", this.VolumeId)+",\n")
	s = append(s, "MountConfig: "+fmt.Sprintf("%#v", this.MountConfig)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolumeMount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.VolumeMount{")
	s = append(s, "DeprecatedVolumeId: "+fmt.Sprintf("%#v", this.DeprecatedVolumeId)+",\n")
	s = append(s, "DeprecatedMode: "+fmt.Sprintf("%#v", this.DeprecatedMode)+",\n")
	s = append(s, "DeprecatedConfig: "+fmt.Sprintf("%#v", this.DeprecatedConfig)+",\n")
	s = append(s, "Driver: "+fmt.Sprintf("%#v", this.Driver)+",\n")
	s = append(s, "ContainerDir: "+fmt.Sprintf("%#v", this.ContainerDir)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.Device != nil {
		s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolumeMount_Shared) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.VolumeMount_Shared{` +
		`Shared:` + fmt.Sprintf("%#v", this.Shared) + `}`}, ", ")
	return s
}
func (this *VolumePlacement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.VolumePlacement{")
	if this.DriverNames != nil {
		s = append(s, "DriverNames: "+fmt.Sprintf("%#v", this.DriverNames)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVolumeMount(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringVolumeMount(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *SharedDevice) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SharedDevice) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintVolumeMount(data, i, uint64(len(m.VolumeId)))
	i += copy(data[i:], m.VolumeId)
	data[i] = 0x12
	i++
	i = encodeVarintVolumeMount(data, i, uint64(len(m.MountConfig)))
	i += copy(data[i:], m.MountConfig)
	return i, nil
}

func (m *VolumeMount) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VolumeMount) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintVolumeMount(data, i, uint64(len(m.Driver)))
	i += copy(data[i:], m.Driver)
	data[i] = 0x12
	i++
	i = encodeVarintVolumeMount(data, i, uint64(len(m.DeprecatedVolumeId)))
	i += copy(data[i:], m.DeprecatedVolumeId)
	data[i] = 0x1a
	i++
	i = encodeVarintVolumeMount(data, i, uint64(len(m.ContainerDir)))
	i += copy(data[i:], m.ContainerDir)
	data[i] = 0x20
	i++
	i = encodeVarintVolumeMount(data, i, uint64(m.DeprecatedMode))
	if m.DeprecatedConfig != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintVolumeMount(data, i, uint64(len(m.DeprecatedConfig)))
		i += copy(data[i:], m.DeprecatedConfig)
	}
	data[i] = 0x32
	i++
	i = encodeVarintVolumeMount(data, i, uint64(len(m.Mode)))
	i += copy(data[i:], m.Mode)
	if m.Device != nil {
		nn1, err := m.Device.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *VolumeMount_Shared) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Shared != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintVolumeMount(data, i, uint64(m.Shared.Size()))
		n2, err := m.Shared.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *VolumePlacement) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VolumePlacement) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DriverNames) > 0 {
		for _, s := range m.DriverNames {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64VolumeMount(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32VolumeMount(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVolumeMount(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SharedDevice) Size() (n int) {
	var l int
	_ = l
	l = len(m.VolumeId)
	n += 1 + l + sovVolumeMount(uint64(l))
	l = len(m.MountConfig)
	n += 1 + l + sovVolumeMount(uint64(l))
	return n
}

func (m *VolumeMount) Size() (n int) {
	var l int
	_ = l
	l = len(m.Driver)
	n += 1 + l + sovVolumeMount(uint64(l))
	l = len(m.DeprecatedVolumeId)
	n += 1 + l + sovVolumeMount(uint64(l))
	l = len(m.ContainerDir)
	n += 1 + l + sovVolumeMount(uint64(l))
	n += 1 + sovVolumeMount(uint64(m.DeprecatedMode))
	if m.DeprecatedConfig != nil {
		l = len(m.DeprecatedConfig)
		n += 1 + l + sovVolumeMount(uint64(l))
	}
	l = len(m.Mode)
	n += 1 + l + sovVolumeMount(uint64(l))
	if m.Device != nil {
		n += m.Device.Size()
	}
	return n
}

func (m *VolumeMount_Shared) Size() (n int) {
	var l int
	_ = l
	if m.Shared != nil {
		l = m.Shared.Size()
		n += 1 + l + sovVolumeMount(uint64(l))
	}
	return n
}
func (m *VolumePlacement) Size() (n int) {
	var l int
	_ = l
	if len(m.DriverNames) > 0 {
		for _, s := range m.DriverNames {
			l = len(s)
			n += 1 + l + sovVolumeMount(uint64(l))
		}
	}
	return n
}

func sovVolumeMount(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVolumeMount(x uint64) (n int) {
	return sovVolumeMount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SharedDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SharedDevice{`,
		`VolumeId:` + fmt.Sprintf("%v", this.VolumeId) + `,`,
		`MountConfig:` + fmt.Sprintf("%v", this.MountConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeMount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeMount{`,
		`Driver:` + fmt.Sprintf("%v", this.Driver) + `,`,
		`DeprecatedVolumeId:` + fmt.Sprintf("%v", this.DeprecatedVolumeId) + `,`,
		`ContainerDir:` + fmt.Sprintf("%v", this.ContainerDir) + `,`,
		`DeprecatedMode:` + fmt.Sprintf("%v", this.DeprecatedMode) + `,`,
		`DeprecatedConfig:` + fmt.Sprintf("%v", this.DeprecatedConfig) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeMount_Shared) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeMount_Shared{`,
		`Shared:` + strings.Replace(fmt.Sprintf("%v", this.Shared), "SharedDevice", "SharedDevice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumePlacement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumePlacement{`,
		`DriverNames:` + fmt.Sprintf("%v", this.DriverNames) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVolumeMount(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SharedDevice) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVolumeMount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharedDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharedDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountConfig = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVolumeMount(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVolumeMount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("volume_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeMount) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVolumeMount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeMount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeMount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedVolumeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedVolumeId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerDir = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedMode", wireType)
			}
			m.DeprecatedMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DeprecatedMode |= (DeprecatedBindMountMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedConfig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedConfig = append(m.DeprecatedConfig[:0], data[iNdEx:postIndex]...)
			if m.DeprecatedConfig == nil {
				m.DeprecatedConfig = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shared", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SharedDevice{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Device = &VolumeMount_Shared{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVolumeMount(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVolumeMount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumePlacement) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVolumeMount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumePlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumePlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverNames = append(m.DriverNames, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVolumeMount(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVolumeMount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVolumeMount(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVolumeMount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVolumeMount
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVolumeMount
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVolumeMount(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVolumeMount = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVolumeMount   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("volume_mount.proto", fileDescriptorVolumeMount) }

var fileDescriptorVolumeMount = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x51, 0xbd, 0x6e, 0xd4, 0x40,
	0x10, 0xb6, 0xef, 0x82, 0x49, 0xf6, 0xcc, 0xe5, 0xb2, 0x3a, 0x84, 0x45, 0x71, 0x77, 0xba, 0x02,
	0x01, 0x02, 0x47, 0x4a, 0x0a, 0x10, 0xa5, 0x39, 0x21, 0x28, 0x02, 0xd1, 0x22, 0x85, 0xd2, 0x72,
	0xbc, 0x1b, 0x67, 0xa5, 0xb3, 0x37, 0xda, 0xb3, 0x8f, 0x96, 0x27, 0x40, 0x3c, 0x06, 0x8f, 0x92,
	0x32, 0x25, 0x55, 0x44, 0x42, 0x83, 0xa8, 0x78, 0x04, 0xc6, 0xb3, 0x1b, 0xdb, 0x29, 0x28, 0xc6,
	0xb3, 0xf3, 0xf3, 0xcd, 0x7c, 0xfe, 0x86, 0xd0, 0xb5, 0x5a, 0x56, 0xb9, 0x88, 0x73, 0x55, 0x15,
	0x65, 0x78, 0xa6, 0x55, 0xa9, 0xa8, 0x97, 0x2b, 0x2e, 0x96, 0xab, 0x87, 0xcf, 0x33, 0x59, 0x9e,
	0x56, 0xc7, 0x61, 0xaa, 0xf2, 0xdd, 0x4c, 0x65, 0x6a, 0x17, 0xcb, 0xc7, 0xd5, 0x09, 0x46, 0x18,
	0xe0, 0xcb, 0xc0, 0xe6, 0x9f, 0x89, 0xff, 0xf1, 0x34, 0xd1, 0x82, 0x2f, 0xc4, 0x5a, 0xa6, 0x82,
	0x86, 0x64, 0xcb, 0x0e, 0x97, 0x3c, 0x70, 0x67, 0xbd, 0xc7, 0x5b, 0xd1, 0xce, 0xf9, 0xe5, 0xd4,
	0xf9, 0x73, 0x39, 0x6d, 0x0b, 0x6c, 0xd3, 0x3c, 0xdf, 0x71, 0xfa, 0x82, 0xf8, 0xc8, 0x22, 0x4e,
	0x55, 0x71, 0x22, 0xb3, 0xa0, 0x37, 0x73, 0x01, 0x32, 0xb6, 0x90, 0x5b, 0x35, 0x36, 0xc0, 0xe8,
	0x35, 0x06, 0xf3, 0xaf, 0x7d, 0x32, 0x38, 0xc2, 0x29, 0x07, 0x75, 0x96, 0x3e, 0x22, 0x1e, 0xd7,
	0x72, 0x2d, 0x34, 0x6c, 0xad, 0x47, 0x0c, 0xed, 0x08, 0x9b, 0x65, 0xd6, 0xd3, 0x97, 0x64, 0xcc,
	0xc5, 0x99, 0x16, 0x69, 0x52, 0x0a, 0x1e, 0xb7, 0x5c, 0xcd, 0x62, 0xaf, 0x46, 0x05, 0x2e, 0xa3,
	0x6d, 0xcf, 0xd1, 0x0d, 0xd5, 0x57, 0xe4, 0x1e, 0x10, 0x29, 0x13, 0x59, 0x08, 0x1d, 0x73, 0xa9,
	0x83, 0x3e, 0x42, 0xee, 0xdb, 0x45, 0xb7, 0x8b, 0xcc, 0x6f, 0xc2, 0x85, 0xd4, 0xf4, 0x90, 0x6c,
	0x77, 0xb6, 0xd6, 0x52, 0x07, 0x1b, 0x80, 0x1e, 0xee, 0x4d, 0x43, 0xa3, 0x7b, 0xb8, 0x68, 0xca,
	0x91, 0x2c, 0x38, 0xfe, 0xd3, 0x01, 0x54, 0x1a, 0x46, 0xc3, 0x16, 0x5f, 0xe7, 0xe9, 0x3e, 0xd9,
	0xe9, 0x4c, 0xb4, 0xea, 0xdd, 0x81, 0x99, 0x7e, 0x03, 0x19, 0xb5, 0x0d, 0x46, 0x34, 0x3a, 0x23,
	0x1b, 0xb8, 0xdb, 0x43, 0xe6, 0xbe, 0x65, 0x8e, 0x39, 0x86, 0x5f, 0xb8, 0x9f, 0xb7, 0xc2, 0x7b,
	0x06, 0x77, 0xa1, 0x67, 0xb0, 0x37, 0xbe, 0xe1, 0xd7, 0xbd, 0xf2, 0x5b, 0x87, 0xd9, 0xae, 0x68,
	0x13, 0x64, 0xc7, 0xdc, 0xfc, 0x0d, 0xd9, 0x36, 0x52, 0x1d, 0x2e, 0x93, 0x54, 0xe4, 0x02, 0x6e,
	0xb2, 0x4f, 0x7c, 0xa3, 0x7a, 0x5c, 0x24, 0xb9, 0x58, 0xc1, 0x65, 0xfa, 0xb0, 0x76, 0x54, 0x1f,
	0xb6, 0x9b, 0x67, 0x03, 0x13, 0xbd, 0xaf, 0x83, 0xa7, 0x4f, 0xc8, 0x83, 0xff, 0x68, 0x41, 0x3d,
	0xd2, 0x63, 0x1f, 0x46, 0x0e, 0xfa, 0x4f, 0x23, 0x37, 0x7a, 0x76, 0x71, 0x35, 0x71, 0x7f, 0x5c,
	0x4d, 0x9c, 0xbf, 0xe0, 0xbf, 0x5c, 0x4f, 0xdc, 0xef, 0x60, 0xe7, 0x60, 0x17, 0x60, 0x3f, 0xc1,
	0x7e, 0x5f, 0x43, 0x0d, 0xfc, 0xb7, 0x5f, 0x13, 0xe7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7,
	0x0a, 0xaa, 0x2b, 0xf6, 0x02, 0x00, 0x00,
}
