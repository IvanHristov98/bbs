// Code generated by protoc-gen-gogo.
// source: image_layer.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ImageLayer_Type int32

const (
	ImageLayer_Shared    ImageLayer_Type = 0
	ImageLayer_Exclusive ImageLayer_Type = 1
)

var ImageLayer_Type_name = map[int32]string{
	0: "Shared",
	1: "Exclusive",
}
var ImageLayer_Type_value = map[string]int32{
	"Shared":    0,
	"Exclusive": 1,
}

func (x ImageLayer_Type) Enum() *ImageLayer_Type {
	p := new(ImageLayer_Type)
	*p = x
	return p
}
func (x ImageLayer_Type) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ImageLayer_Type_name, int32(x))
}
func (x *ImageLayer_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImageLayer_Type_value, data, "ImageLayer_Type")
	if err != nil {
		return err
	}
	*x = ImageLayer_Type(value)
	return nil
}
func (ImageLayer_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorImageLayer, []int{0, 0} }

type ImageLayer struct {
	Name              string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Url               string          `protobuf:"bytes,2,opt,name=url" json:"url"`
	DestinationPath   string          `protobuf:"bytes,3,opt,name=destination_path,json=destinationPath" json:"destination_path"`
	LayerType         ImageLayer_Type `protobuf:"varint,4,opt,name=layer_type,json=layerType,enum=models.ImageLayer_Type" json:"layer_type"`
	ContentType       string          `protobuf:"bytes,5,opt,name=content_type,json=contentType" json:"content_type"`
	ChecksumAlgorithm string          `protobuf:"bytes,6,opt,name=checksum_algorithm,json=checksumAlgorithm" json:"checksum_algorithm,omitempty"`
	ChecksumValue     string          `protobuf:"bytes,7,opt,name=checksum_value,json=checksumValue" json:"checksum_value,omitempty"`
}

func (m *ImageLayer) Reset()                    { *m = ImageLayer{} }
func (*ImageLayer) ProtoMessage()               {}
func (*ImageLayer) Descriptor() ([]byte, []int) { return fileDescriptorImageLayer, []int{0} }

func (m *ImageLayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageLayer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ImageLayer) GetDestinationPath() string {
	if m != nil {
		return m.DestinationPath
	}
	return ""
}

func (m *ImageLayer) GetLayerType() ImageLayer_Type {
	if m != nil {
		return m.LayerType
	}
	return ImageLayer_Shared
}

func (m *ImageLayer) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ImageLayer) GetChecksumAlgorithm() string {
	if m != nil {
		return m.ChecksumAlgorithm
	}
	return ""
}

func (m *ImageLayer) GetChecksumValue() string {
	if m != nil {
		return m.ChecksumValue
	}
	return ""
}

func init() {
	proto.RegisterType((*ImageLayer)(nil), "models.ImageLayer")
	proto.RegisterEnum("models.ImageLayer_Type", ImageLayer_Type_name, ImageLayer_Type_value)
}
func (x ImageLayer_Type) String() string {
	s, ok := ImageLayer_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ImageLayer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImageLayer)
	if !ok {
		that2, ok := that.(ImageLayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.DestinationPath != that1.DestinationPath {
		return false
	}
	if this.LayerType != that1.LayerType {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.ChecksumAlgorithm != that1.ChecksumAlgorithm {
		return false
	}
	if this.ChecksumValue != that1.ChecksumValue {
		return false
	}
	return true
}
func (this *ImageLayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.ImageLayer{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "DestinationPath: "+fmt.Sprintf("%#v", this.DestinationPath)+",\n")
	s = append(s, "LayerType: "+fmt.Sprintf("%#v", this.LayerType)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "ChecksumAlgorithm: "+fmt.Sprintf("%#v", this.ChecksumAlgorithm)+",\n")
	s = append(s, "ChecksumValue: "+fmt.Sprintf("%#v", this.ChecksumValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringImageLayer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ImageLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageLayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.DestinationPath)))
	i += copy(dAtA[i:], m.DestinationPath)
	dAtA[i] = 0x20
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(m.LayerType))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.ContentType)))
	i += copy(dAtA[i:], m.ContentType)
	dAtA[i] = 0x32
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.ChecksumAlgorithm)))
	i += copy(dAtA[i:], m.ChecksumAlgorithm)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.ChecksumValue)))
	i += copy(dAtA[i:], m.ChecksumValue)
	return i, nil
}

func encodeFixed64ImageLayer(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ImageLayer(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintImageLayer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ImageLayer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovImageLayer(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovImageLayer(uint64(l))
	l = len(m.DestinationPath)
	n += 1 + l + sovImageLayer(uint64(l))
	n += 1 + sovImageLayer(uint64(m.LayerType))
	l = len(m.ContentType)
	n += 1 + l + sovImageLayer(uint64(l))
	l = len(m.ChecksumAlgorithm)
	n += 1 + l + sovImageLayer(uint64(l))
	l = len(m.ChecksumValue)
	n += 1 + l + sovImageLayer(uint64(l))
	return n
}

func sovImageLayer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImageLayer(x uint64) (n int) {
	return sovImageLayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImageLayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageLayer{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`DestinationPath:` + fmt.Sprintf("%v", this.DestinationPath) + `,`,
		`LayerType:` + fmt.Sprintf("%v", this.LayerType) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`ChecksumAlgorithm:` + fmt.Sprintf("%v", this.ChecksumAlgorithm) + `,`,
		`ChecksumValue:` + fmt.Sprintf("%v", this.ChecksumValue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringImageLayer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImageLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayerType", wireType)
			}
			m.LayerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LayerType |= (ImageLayer_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImageLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImageLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImageLayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImageLayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImageLayer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImageLayer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImageLayer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImageLayer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImageLayer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("image_layer.proto", fileDescriptorImageLayer) }

var fileDescriptorImageLayer = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x41, 0x4f, 0xe2, 0x40,
	0x18, 0x86, 0x3b, 0x4b, 0x97, 0x0d, 0xdf, 0x2e, 0x2c, 0xcc, 0x81, 0x6d, 0x36, 0x9b, 0x81, 0x25,
	0x9b, 0x2c, 0xd9, 0xb0, 0x25, 0xf1, 0xec, 0x45, 0x12, 0x63, 0x4c, 0x3c, 0x18, 0x30, 0x5e, 0x9b,
	0xa1, 0x8c, 0x6d, 0x63, 0xa7, 0xd3, 0xb4, 0x53, 0x62, 0x6f, 0xfe, 0x04, 0x7f, 0x86, 0xfe, 0x13,
	0x8e, 0x1c, 0x3d, 0x11, 0xa9, 0x17, 0xe3, 0x89, 0x9f, 0x60, 0x3a, 0x14, 0xad, 0xf1, 0x36, 0xdf,
	0xf7, 0xbc, 0xef, 0x3b, 0xdf, 0x0b, 0x2d, 0x8f, 0x53, 0x87, 0x59, 0x3e, 0x4d, 0x59, 0x64, 0x86,
	0x91, 0x90, 0x02, 0x57, 0xb9, 0x98, 0x31, 0x3f, 0xfe, 0xf9, 0xdf, 0xf1, 0xa4, 0x9b, 0x4c, 0x4d,
	0x5b, 0xf0, 0xa1, 0x23, 0x1c, 0x31, 0x54, 0x78, 0x9a, 0x5c, 0xa8, 0x49, 0x0d, 0xea, 0xb5, 0xb5,
	0xf5, 0xee, 0x2a, 0x00, 0xc7, 0x79, 0xd8, 0x49, 0x9e, 0x85, 0xff, 0x81, 0x1e, 0x50, 0xce, 0x0c,
	0xd4, 0x45, 0xfd, 0xda, 0xa8, 0xbd, 0x58, 0x75, 0xb4, 0xe7, 0x55, 0xa7, 0x91, 0xef, 0x06, 0x82,
	0x7b, 0x92, 0xf1, 0x50, 0xa6, 0x63, 0xa5, 0xc1, 0x6d, 0xa8, 0x24, 0x91, 0x6f, 0x7c, 0x52, 0x52,
	0x3d, 0x97, 0x8e, 0xf3, 0x05, 0x1e, 0x42, 0x73, 0xc6, 0x62, 0xe9, 0x05, 0x54, 0x7a, 0x22, 0xb0,
	0x42, 0x2a, 0x5d, 0xa3, 0x52, 0x12, 0x7d, 0x2f, 0xd1, 0x53, 0x2a, 0x5d, 0xbc, 0x0f, 0xa0, 0x9a,
	0x58, 0x32, 0x0d, 0x99, 0xa1, 0x77, 0x51, 0xbf, 0xb1, 0xf7, 0xc3, 0xdc, 0xf6, 0x31, 0xdf, 0x8e,
	0x33, 0xcf, 0xd2, 0x90, 0x15, 0x19, 0x35, 0x65, 0xc8, 0x17, 0xf8, 0x2f, 0x7c, 0xb3, 0x45, 0x20,
	0x59, 0x20, 0xb7, 0xfe, 0xcf, 0xa5, 0xaf, 0xbe, 0x16, 0x44, 0x09, 0x27, 0x80, 0x6d, 0x97, 0xd9,
	0x97, 0x71, 0xc2, 0x2d, 0xea, 0x3b, 0x22, 0xf2, 0xa4, 0xcb, 0x8d, 0xaa, 0x92, 0xff, 0x29, 0x9a,
	0xfe, 0xfa, 0xa8, 0x28, 0xf5, 0x6e, 0xed, 0xe8, 0xc1, 0x0e, 0xe2, 0x23, 0x68, 0xbc, 0x5a, 0xe6,
	0xd4, 0x4f, 0x98, 0xf1, 0x45, 0x05, 0x76, 0x8b, 0x40, 0xe3, 0x3d, 0x2d, 0x85, 0xd5, 0x77, 0xe4,
	0x3c, 0x07, 0xbd, 0xdf, 0xa0, 0xab, 0x2b, 0x01, 0xaa, 0x13, 0x97, 0x46, 0x6c, 0xd6, 0xd4, 0x70,
	0x1d, 0x6a, 0x87, 0x57, 0xb6, 0x9f, 0xc4, 0xde, 0x9c, 0x35, 0xd1, 0x68, 0xb0, 0x5c, 0x13, 0x74,
	0xbf, 0x26, 0xda, 0x66, 0x4d, 0xd0, 0x75, 0x46, 0xd0, 0x6d, 0x46, 0xd0, 0x22, 0x23, 0x68, 0x99,
	0x11, 0xf4, 0x90, 0x11, 0xf4, 0x94, 0x11, 0x6d, 0x93, 0x11, 0x74, 0xf3, 0x48, 0xb4, 0x97, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3d, 0x0c, 0xb5, 0xf1, 0x24, 0x02, 0x00, 0x00,
}
