// Code generated by protoc-gen-gogo.
// source: server.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BBS service

type BBSClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Cells(ctx context.Context, in *CellsRequest, opts ...grpc.CallOption) (*CellsResponse, error)
	DesireTask(ctx context.Context, in *DesireTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	Tasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*TasksResponse, error)
	TaskByGuid(ctx context.Context, in *TaskByGuidRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	CancelTask(ctx context.Context, in *TaskGuidRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error)
	ResolvingTask(ctx context.Context, in *TaskGuidRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error)
	DeleteTask(ctx context.Context, in *TaskGuidRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error)
	// internal
	StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error)
	FailTask(ctx context.Context, in *FailTaskRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error)
	CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error)
	Domains(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*DomainsResponse, error)
	UpsertDomain(ctx context.Context, in *UpsertDomainRequest, opts ...grpc.CallOption) (*UpsertDomainResponse, error)
	ActualLRPGroups(ctx context.Context, in *ActualLRPGroupsRequest, opts ...grpc.CallOption) (*ActualLRPGroupsResponse, error)
	ActualLRPGroupsByProcessGuid(ctx context.Context, in *ActualLRPGroupsByProcessGuidRequest, opts ...grpc.CallOption) (*ActualLRPGroupsResponse, error)
	ActualLRPGroupByProcessGuidAndIndex(ctx context.Context, in *ActualLRPGroupByProcessGuidAndIndexRequest, opts ...grpc.CallOption) (*ActualLRPGroupResponse, error)
	RetireActualLRP(ctx context.Context, in *RetireActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error)
	// internal
	ClaimActualLRP(ctx context.Context, in *ClaimActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error)
	StartActualLRP(ctx context.Context, in *StartActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error)
	CrashActualLRP(ctx context.Context, in *CrashActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error)
	FailActualLRP(ctx context.Context, in *FailActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error)
	RemoveActualLRP(ctx context.Context, in *RemoveActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error)
	// internal
	EvacuateClaimedActualLRP(ctx context.Context, in *EvacuateClaimedActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error)
	EvacuateRunningActualLRP(ctx context.Context, in *EvacuateRunningActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error)
	EvacuateCrashedActualLRP(ctx context.Context, in *EvacuateCrashedActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error)
	EvacuateStoppedActualLRP(ctx context.Context, in *EvacuateStoppedActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error)
	RemoveEvacuatingActualLRP(ctx context.Context, in *RemoveEvacuatingActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error)
	DesiredLRPs(ctx context.Context, in *DesiredLRPsRequest, opts ...grpc.CallOption) (*DesiredLRPsResponse, error)
	DesiredLRPByProcessGuid(ctx context.Context, in *DesiredLRPByProcessGuidRequest, opts ...grpc.CallOption) (*DesiredLRPResponse, error)
	DesiredLRPSchedulingInfos(ctx context.Context, in *DesiredLRPsRequest, opts ...grpc.CallOption) (*DesiredLRPSchedulingInfosResponse, error)
	DesireLRP(ctx context.Context, in *DesireLRPRequest, opts ...grpc.CallOption) (*DesiredLRPLifecycleResponse, error)
	UpdateDesireLRP(ctx context.Context, in *UpdateDesiredLRPRequest, opts ...grpc.CallOption) (*DesiredLRPLifecycleResponse, error)
	RemoveDesireLRP(ctx context.Context, in *RemoveDesiredLRPRequest, opts ...grpc.CallOption) (*DesiredLRPLifecycleResponse, error)
	SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (BBS_SubscribeToEventsClient, error)
}

type bBSClient struct {
	cc *grpc.ClientConn
}

func NewBBSClient(cc *grpc.ClientConn) BBSClient {
	return &bBSClient{cc}
}

func (c *bBSClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/models.BBS/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) Cells(ctx context.Context, in *CellsRequest, opts ...grpc.CallOption) (*CellsResponse, error) {
	out := new(CellsResponse)
	err := grpc.Invoke(ctx, "/models.BBS/Cells", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) DesireTask(ctx context.Context, in *DesireTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/models.BBS/DesireTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) Tasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*TasksResponse, error) {
	out := new(TasksResponse)
	err := grpc.Invoke(ctx, "/models.BBS/Tasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) TaskByGuid(ctx context.Context, in *TaskByGuidRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/models.BBS/TaskByGuid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) CancelTask(ctx context.Context, in *TaskGuidRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error) {
	out := new(TaskLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/CancelTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) ResolvingTask(ctx context.Context, in *TaskGuidRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error) {
	out := new(TaskLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/ResolvingTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) DeleteTask(ctx context.Context, in *TaskGuidRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error) {
	out := new(TaskLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/DeleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error) {
	out := new(TaskLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) FailTask(ctx context.Context, in *FailTaskRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error) {
	out := new(TaskLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/FailTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*TaskLifecycleResponse, error) {
	out := new(TaskLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/CompleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) Domains(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*DomainsResponse, error) {
	out := new(DomainsResponse)
	err := grpc.Invoke(ctx, "/models.BBS/Domains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) UpsertDomain(ctx context.Context, in *UpsertDomainRequest, opts ...grpc.CallOption) (*UpsertDomainResponse, error) {
	out := new(UpsertDomainResponse)
	err := grpc.Invoke(ctx, "/models.BBS/UpsertDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) ActualLRPGroups(ctx context.Context, in *ActualLRPGroupsRequest, opts ...grpc.CallOption) (*ActualLRPGroupsResponse, error) {
	out := new(ActualLRPGroupsResponse)
	err := grpc.Invoke(ctx, "/models.BBS/ActualLRPGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) ActualLRPGroupsByProcessGuid(ctx context.Context, in *ActualLRPGroupsByProcessGuidRequest, opts ...grpc.CallOption) (*ActualLRPGroupsResponse, error) {
	out := new(ActualLRPGroupsResponse)
	err := grpc.Invoke(ctx, "/models.BBS/ActualLRPGroupsByProcessGuid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) ActualLRPGroupByProcessGuidAndIndex(ctx context.Context, in *ActualLRPGroupByProcessGuidAndIndexRequest, opts ...grpc.CallOption) (*ActualLRPGroupResponse, error) {
	out := new(ActualLRPGroupResponse)
	err := grpc.Invoke(ctx, "/models.BBS/ActualLRPGroupByProcessGuidAndIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) RetireActualLRP(ctx context.Context, in *RetireActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error) {
	out := new(ActualLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/RetireActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) ClaimActualLRP(ctx context.Context, in *ClaimActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error) {
	out := new(ActualLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/ClaimActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) StartActualLRP(ctx context.Context, in *StartActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error) {
	out := new(ActualLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/StartActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) CrashActualLRP(ctx context.Context, in *CrashActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error) {
	out := new(ActualLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/CrashActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) FailActualLRP(ctx context.Context, in *FailActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error) {
	out := new(ActualLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/FailActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) RemoveActualLRP(ctx context.Context, in *RemoveActualLRPRequest, opts ...grpc.CallOption) (*ActualLRPLifecycleResponse, error) {
	out := new(ActualLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/RemoveActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) EvacuateClaimedActualLRP(ctx context.Context, in *EvacuateClaimedActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error) {
	out := new(EvacuationResponse)
	err := grpc.Invoke(ctx, "/models.BBS/EvacuateClaimedActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) EvacuateRunningActualLRP(ctx context.Context, in *EvacuateRunningActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error) {
	out := new(EvacuationResponse)
	err := grpc.Invoke(ctx, "/models.BBS/EvacuateRunningActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) EvacuateCrashedActualLRP(ctx context.Context, in *EvacuateCrashedActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error) {
	out := new(EvacuationResponse)
	err := grpc.Invoke(ctx, "/models.BBS/EvacuateCrashedActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) EvacuateStoppedActualLRP(ctx context.Context, in *EvacuateStoppedActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error) {
	out := new(EvacuationResponse)
	err := grpc.Invoke(ctx, "/models.BBS/EvacuateStoppedActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) RemoveEvacuatingActualLRP(ctx context.Context, in *RemoveEvacuatingActualLRPRequest, opts ...grpc.CallOption) (*EvacuationResponse, error) {
	out := new(EvacuationResponse)
	err := grpc.Invoke(ctx, "/models.BBS/RemoveEvacuatingActualLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) DesiredLRPs(ctx context.Context, in *DesiredLRPsRequest, opts ...grpc.CallOption) (*DesiredLRPsResponse, error) {
	out := new(DesiredLRPsResponse)
	err := grpc.Invoke(ctx, "/models.BBS/DesiredLRPs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) DesiredLRPByProcessGuid(ctx context.Context, in *DesiredLRPByProcessGuidRequest, opts ...grpc.CallOption) (*DesiredLRPResponse, error) {
	out := new(DesiredLRPResponse)
	err := grpc.Invoke(ctx, "/models.BBS/DesiredLRPByProcessGuid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) DesiredLRPSchedulingInfos(ctx context.Context, in *DesiredLRPsRequest, opts ...grpc.CallOption) (*DesiredLRPSchedulingInfosResponse, error) {
	out := new(DesiredLRPSchedulingInfosResponse)
	err := grpc.Invoke(ctx, "/models.BBS/DesiredLRPSchedulingInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) DesireLRP(ctx context.Context, in *DesireLRPRequest, opts ...grpc.CallOption) (*DesiredLRPLifecycleResponse, error) {
	out := new(DesiredLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/DesireLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) UpdateDesireLRP(ctx context.Context, in *UpdateDesiredLRPRequest, opts ...grpc.CallOption) (*DesiredLRPLifecycleResponse, error) {
	out := new(DesiredLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/UpdateDesireLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) RemoveDesireLRP(ctx context.Context, in *RemoveDesiredLRPRequest, opts ...grpc.CallOption) (*DesiredLRPLifecycleResponse, error) {
	out := new(DesiredLRPLifecycleResponse)
	err := grpc.Invoke(ctx, "/models.BBS/RemoveDesireLRP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBSClient) SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (BBS_SubscribeToEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BBS_serviceDesc.Streams[0], c.cc, "/models.BBS/SubscribeToEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &bBSSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BBS_SubscribeToEventsClient interface {
	Recv() (*EventHolder, error)
	grpc.ClientStream
}

type bBSSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *bBSSubscribeToEventsClient) Recv() (*EventHolder, error) {
	m := new(EventHolder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BBS service

type BBSServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Cells(context.Context, *CellsRequest) (*CellsResponse, error)
	DesireTask(context.Context, *DesireTaskRequest) (*TaskResponse, error)
	Tasks(context.Context, *TasksRequest) (*TasksResponse, error)
	TaskByGuid(context.Context, *TaskByGuidRequest) (*TaskResponse, error)
	CancelTask(context.Context, *TaskGuidRequest) (*TaskLifecycleResponse, error)
	ResolvingTask(context.Context, *TaskGuidRequest) (*TaskLifecycleResponse, error)
	DeleteTask(context.Context, *TaskGuidRequest) (*TaskLifecycleResponse, error)
	// internal
	StartTask(context.Context, *StartTaskRequest) (*TaskLifecycleResponse, error)
	FailTask(context.Context, *FailTaskRequest) (*TaskLifecycleResponse, error)
	CompleteTask(context.Context, *CompleteTaskRequest) (*TaskLifecycleResponse, error)
	Domains(context.Context, *DomainRequest) (*DomainsResponse, error)
	UpsertDomain(context.Context, *UpsertDomainRequest) (*UpsertDomainResponse, error)
	ActualLRPGroups(context.Context, *ActualLRPGroupsRequest) (*ActualLRPGroupsResponse, error)
	ActualLRPGroupsByProcessGuid(context.Context, *ActualLRPGroupsByProcessGuidRequest) (*ActualLRPGroupsResponse, error)
	ActualLRPGroupByProcessGuidAndIndex(context.Context, *ActualLRPGroupByProcessGuidAndIndexRequest) (*ActualLRPGroupResponse, error)
	RetireActualLRP(context.Context, *RetireActualLRPRequest) (*ActualLRPLifecycleResponse, error)
	// internal
	ClaimActualLRP(context.Context, *ClaimActualLRPRequest) (*ActualLRPLifecycleResponse, error)
	StartActualLRP(context.Context, *StartActualLRPRequest) (*ActualLRPLifecycleResponse, error)
	CrashActualLRP(context.Context, *CrashActualLRPRequest) (*ActualLRPLifecycleResponse, error)
	FailActualLRP(context.Context, *FailActualLRPRequest) (*ActualLRPLifecycleResponse, error)
	RemoveActualLRP(context.Context, *RemoveActualLRPRequest) (*ActualLRPLifecycleResponse, error)
	// internal
	EvacuateClaimedActualLRP(context.Context, *EvacuateClaimedActualLRPRequest) (*EvacuationResponse, error)
	EvacuateRunningActualLRP(context.Context, *EvacuateRunningActualLRPRequest) (*EvacuationResponse, error)
	EvacuateCrashedActualLRP(context.Context, *EvacuateCrashedActualLRPRequest) (*EvacuationResponse, error)
	EvacuateStoppedActualLRP(context.Context, *EvacuateStoppedActualLRPRequest) (*EvacuationResponse, error)
	RemoveEvacuatingActualLRP(context.Context, *RemoveEvacuatingActualLRPRequest) (*EvacuationResponse, error)
	DesiredLRPs(context.Context, *DesiredLRPsRequest) (*DesiredLRPsResponse, error)
	DesiredLRPByProcessGuid(context.Context, *DesiredLRPByProcessGuidRequest) (*DesiredLRPResponse, error)
	DesiredLRPSchedulingInfos(context.Context, *DesiredLRPsRequest) (*DesiredLRPSchedulingInfosResponse, error)
	DesireLRP(context.Context, *DesireLRPRequest) (*DesiredLRPLifecycleResponse, error)
	UpdateDesireLRP(context.Context, *UpdateDesiredLRPRequest) (*DesiredLRPLifecycleResponse, error)
	RemoveDesireLRP(context.Context, *RemoveDesiredLRPRequest) (*DesiredLRPLifecycleResponse, error)
	SubscribeToEvents(*SubscribeToEventsRequest, BBS_SubscribeToEventsServer) error
}

func RegisterBBSServer(s *grpc.Server, srv BBSServer) {
	s.RegisterService(&_BBS_serviceDesc, srv)
}

func _BBS_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_Cells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).Cells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/Cells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).Cells(ctx, req.(*CellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_DesireTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesireTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).DesireTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/DesireTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).DesireTask(ctx, req.(*DesireTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/Tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).Tasks(ctx, req.(*TasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_TaskByGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskByGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).TaskByGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/TaskByGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).TaskByGuid(ctx, req.(*TaskByGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).CancelTask(ctx, req.(*TaskGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_ResolvingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).ResolvingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/ResolvingTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).ResolvingTask(ctx, req.(*TaskGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).DeleteTask(ctx, req.(*TaskGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).StartTask(ctx, req.(*StartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_FailTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).FailTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/FailTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).FailTask(ctx, req.(*FailTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/CompleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).CompleteTask(ctx, req.(*CompleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_Domains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).Domains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/Domains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).Domains(ctx, req.(*DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_UpsertDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).UpsertDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/UpsertDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).UpsertDomain(ctx, req.(*UpsertDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_ActualLRPGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActualLRPGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).ActualLRPGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/ActualLRPGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).ActualLRPGroups(ctx, req.(*ActualLRPGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_ActualLRPGroupsByProcessGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActualLRPGroupsByProcessGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).ActualLRPGroupsByProcessGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/ActualLRPGroupsByProcessGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).ActualLRPGroupsByProcessGuid(ctx, req.(*ActualLRPGroupsByProcessGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_ActualLRPGroupByProcessGuidAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActualLRPGroupByProcessGuidAndIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).ActualLRPGroupByProcessGuidAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/ActualLRPGroupByProcessGuidAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).ActualLRPGroupByProcessGuidAndIndex(ctx, req.(*ActualLRPGroupByProcessGuidAndIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_RetireActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetireActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).RetireActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/RetireActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).RetireActualLRP(ctx, req.(*RetireActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_ClaimActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).ClaimActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/ClaimActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).ClaimActualLRP(ctx, req.(*ClaimActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_StartActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).StartActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/StartActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).StartActualLRP(ctx, req.(*StartActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_CrashActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrashActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).CrashActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/CrashActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).CrashActualLRP(ctx, req.(*CrashActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_FailActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).FailActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/FailActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).FailActualLRP(ctx, req.(*FailActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_RemoveActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).RemoveActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/RemoveActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).RemoveActualLRP(ctx, req.(*RemoveActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_EvacuateClaimedActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvacuateClaimedActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).EvacuateClaimedActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/EvacuateClaimedActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).EvacuateClaimedActualLRP(ctx, req.(*EvacuateClaimedActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_EvacuateRunningActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvacuateRunningActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).EvacuateRunningActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/EvacuateRunningActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).EvacuateRunningActualLRP(ctx, req.(*EvacuateRunningActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_EvacuateCrashedActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvacuateCrashedActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).EvacuateCrashedActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/EvacuateCrashedActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).EvacuateCrashedActualLRP(ctx, req.(*EvacuateCrashedActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_EvacuateStoppedActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvacuateStoppedActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).EvacuateStoppedActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/EvacuateStoppedActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).EvacuateStoppedActualLRP(ctx, req.(*EvacuateStoppedActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_RemoveEvacuatingActualLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEvacuatingActualLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).RemoveEvacuatingActualLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/RemoveEvacuatingActualLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).RemoveEvacuatingActualLRP(ctx, req.(*RemoveEvacuatingActualLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_DesiredLRPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredLRPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).DesiredLRPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/DesiredLRPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).DesiredLRPs(ctx, req.(*DesiredLRPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_DesiredLRPByProcessGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredLRPByProcessGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).DesiredLRPByProcessGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/DesiredLRPByProcessGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).DesiredLRPByProcessGuid(ctx, req.(*DesiredLRPByProcessGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_DesiredLRPSchedulingInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredLRPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).DesiredLRPSchedulingInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/DesiredLRPSchedulingInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).DesiredLRPSchedulingInfos(ctx, req.(*DesiredLRPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_DesireLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesireLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).DesireLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/DesireLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).DesireLRP(ctx, req.(*DesireLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_UpdateDesireLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDesiredLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).UpdateDesireLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/UpdateDesireLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).UpdateDesireLRP(ctx, req.(*UpdateDesiredLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_RemoveDesireLRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDesiredLRPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBSServer).RemoveDesireLRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.BBS/RemoveDesireLRP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBSServer).RemoveDesireLRP(ctx, req.(*RemoveDesiredLRPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBS_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BBSServer).SubscribeToEvents(m, &bBSSubscribeToEventsServer{stream})
}

type BBS_SubscribeToEventsServer interface {
	Send(*EventHolder) error
	grpc.ServerStream
}

type bBSSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *bBSSubscribeToEventsServer) Send(m *EventHolder) error {
	return x.ServerStream.SendMsg(m)
}

var _BBS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.BBS",
	HandlerType: (*BBSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BBS_Ping_Handler,
		},
		{
			MethodName: "Cells",
			Handler:    _BBS_Cells_Handler,
		},
		{
			MethodName: "DesireTask",
			Handler:    _BBS_DesireTask_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _BBS_Tasks_Handler,
		},
		{
			MethodName: "TaskByGuid",
			Handler:    _BBS_TaskByGuid_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _BBS_CancelTask_Handler,
		},
		{
			MethodName: "ResolvingTask",
			Handler:    _BBS_ResolvingTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _BBS_DeleteTask_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _BBS_StartTask_Handler,
		},
		{
			MethodName: "FailTask",
			Handler:    _BBS_FailTask_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _BBS_CompleteTask_Handler,
		},
		{
			MethodName: "Domains",
			Handler:    _BBS_Domains_Handler,
		},
		{
			MethodName: "UpsertDomain",
			Handler:    _BBS_UpsertDomain_Handler,
		},
		{
			MethodName: "ActualLRPGroups",
			Handler:    _BBS_ActualLRPGroups_Handler,
		},
		{
			MethodName: "ActualLRPGroupsByProcessGuid",
			Handler:    _BBS_ActualLRPGroupsByProcessGuid_Handler,
		},
		{
			MethodName: "ActualLRPGroupByProcessGuidAndIndex",
			Handler:    _BBS_ActualLRPGroupByProcessGuidAndIndex_Handler,
		},
		{
			MethodName: "RetireActualLRP",
			Handler:    _BBS_RetireActualLRP_Handler,
		},
		{
			MethodName: "ClaimActualLRP",
			Handler:    _BBS_ClaimActualLRP_Handler,
		},
		{
			MethodName: "StartActualLRP",
			Handler:    _BBS_StartActualLRP_Handler,
		},
		{
			MethodName: "CrashActualLRP",
			Handler:    _BBS_CrashActualLRP_Handler,
		},
		{
			MethodName: "FailActualLRP",
			Handler:    _BBS_FailActualLRP_Handler,
		},
		{
			MethodName: "RemoveActualLRP",
			Handler:    _BBS_RemoveActualLRP_Handler,
		},
		{
			MethodName: "EvacuateClaimedActualLRP",
			Handler:    _BBS_EvacuateClaimedActualLRP_Handler,
		},
		{
			MethodName: "EvacuateRunningActualLRP",
			Handler:    _BBS_EvacuateRunningActualLRP_Handler,
		},
		{
			MethodName: "EvacuateCrashedActualLRP",
			Handler:    _BBS_EvacuateCrashedActualLRP_Handler,
		},
		{
			MethodName: "EvacuateStoppedActualLRP",
			Handler:    _BBS_EvacuateStoppedActualLRP_Handler,
		},
		{
			MethodName: "RemoveEvacuatingActualLRP",
			Handler:    _BBS_RemoveEvacuatingActualLRP_Handler,
		},
		{
			MethodName: "DesiredLRPs",
			Handler:    _BBS_DesiredLRPs_Handler,
		},
		{
			MethodName: "DesiredLRPByProcessGuid",
			Handler:    _BBS_DesiredLRPByProcessGuid_Handler,
		},
		{
			MethodName: "DesiredLRPSchedulingInfos",
			Handler:    _BBS_DesiredLRPSchedulingInfos_Handler,
		},
		{
			MethodName: "DesireLRP",
			Handler:    _BBS_DesireLRP_Handler,
		},
		{
			MethodName: "UpdateDesireLRP",
			Handler:    _BBS_UpdateDesireLRP_Handler,
		},
		{
			MethodName: "RemoveDesireLRP",
			Handler:    _BBS_RemoveDesireLRP_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _BBS_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptorServer) }

var fileDescriptorServer = []byte{
	// 783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x96, 0x4d, 0x6f, 0xd3, 0x3e,
	0x1c, 0xc7, 0x1b, 0xfd, 0xff, 0x3c, 0xcc, 0xeb, 0x18, 0x64, 0xc0, 0xd6, 0x6e, 0x64, 0x68, 0x93,
	0x78, 0x10, 0x68, 0x42, 0x43, 0xe2, 0xc2, 0x01, 0xad, 0xdd, 0xa3, 0xa8, 0x50, 0xd5, 0x6e, 0x42,
	0x9c, 0xa6, 0x2c, 0xf9, 0xad, 0xb3, 0x96, 0xda, 0x21, 0x4e, 0x2a, 0x26, 0x2e, 0xbc, 0x04, 0xc4,
	0xab, 0xe0, 0xa5, 0x70, 0xdc, 0x91, 0x23, 0x2b, 0x17, 0x8e, 0x7b, 0x09, 0xa8, 0xce, 0x1c, 0xdb,
	0xa9, 0x5b, 0xda, 0xed, 0xe8, 0xef, 0xf7, 0xe7, 0xcf, 0xd7, 0xb1, 0x7f, 0x4e, 0x82, 0x8a, 0x0c,
	0xa2, 0x0e, 0x44, 0x2b, 0x61, 0x44, 0x63, 0x6a, 0x5f, 0x6f, 0x53, 0x1f, 0x02, 0x56, 0x46, 0x21,
	0x26, 0xad, 0x54, 0x2b, 0x17, 0xa1, 0x03, 0x24, 0x66, 0x17, 0xa3, 0xb2, 0x0f, 0x0c, 0x47, 0xe0,
	0xef, 0x07, 0x51, 0xb8, 0x1f, 0xc1, 0xc7, 0x04, 0x58, 0xe6, 0x95, 0x5c, 0x2f, 0x4e, 0xdc, 0xc0,
	0x64, 0x4d, 0x7a, 0x10, 0x04, 0x62, 0x70, 0x1b, 0x3a, 0xae, 0x97, 0xb8, 0x31, 0xa6, 0x44, 0x64,
	0xf8, 0xb4, 0xed, 0x62, 0x31, 0x9a, 0x89, 0x5d, 0x76, 0x9c, 0x23, 0xac, 0x7e, 0xbb, 0x8f, 0xfe,
	0xab, 0x54, 0x9a, 0xf6, 0x4b, 0xf4, 0x7f, 0x1d, 0x93, 0x96, 0x3d, 0xb3, 0x92, 0xae, 0x75, 0xa5,
	0x37, 0x6a, 0xa4, 0xb5, 0xe5, 0xbb, 0xba, 0xc8, 0x42, 0x4a, 0x18, 0x2c, 0x15, 0xec, 0x57, 0xe8,
	0x5a, 0xb5, 0xb7, 0x00, 0x3b, 0x2b, 0xe0, 0x43, 0x31, 0xed, 0x5e, 0x4e, 0xcd, 0xe6, 0xbd, 0x41,
	0x68, 0x9d, 0x3f, 0xef, 0xae, 0xcb, 0x8e, 0xed, 0x92, 0x28, 0x93, 0x5a, 0x5f, 0x70, 0x2a, 0xaa,
	0xc1, 0x3d, 0x45, 0x09, 0xe6, 0xc3, 0xbe, 0xe0, 0x0b, 0x55, 0x0d, 0xee, 0x49, 0x95, 0x93, 0xad,
	0x04, 0xfb, 0x32, 0x58, 0x6a, 0xff, 0x0a, 0xde, 0x44, 0xa8, 0xea, 0x12, 0x0f, 0x02, 0xbe, 0xf2,
	0x59, 0xb5, 0x4a, 0x9d, 0xfe, 0x40, 0x35, 0x6a, 0xf8, 0x10, 0xbc, 0x13, 0x2f, 0x00, 0x85, 0xb3,
	0x83, 0xa6, 0x1a, 0xc0, 0x68, 0xd0, 0xc1, 0xa4, 0x75, 0x45, 0xd4, 0x66, 0x6f, 0x33, 0x03, 0x88,
	0xe1, 0xca, 0x9c, 0x89, 0x66, 0xec, 0x46, 0x31, 0xc7, 0xcc, 0x89, 0xea, 0x4c, 0x1a, 0x99, 0xb3,
	0x8e, 0x6e, 0x6e, 0xba, 0x38, 0xb7, 0x41, 0x42, 0x19, 0x99, 0x52, 0x43, 0xc5, 0x2a, 0x6d, 0x87,
	0xd9, 0x73, 0xcd, 0x67, 0xbd, 0xa4, 0xa8, 0x23, 0xd3, 0x5e, 0xa3, 0x1b, 0xeb, 0xfc, 0x2a, 0x30,
	0x3b, 0xeb, 0x8d, 0x54, 0x10, 0x88, 0x59, 0x5d, 0x56, 0x9b, 0xe6, 0x2d, 0x2a, 0xee, 0x85, 0x0c,
	0xa2, 0x38, 0xb5, 0xe4, 0x52, 0x54, 0x55, 0x70, 0x16, 0xcc, 0x66, 0x06, 0xdb, 0x45, 0xd3, 0x6b,
	0xfc, 0x3a, 0xd7, 0x1a, 0xf5, 0xad, 0x88, 0x26, 0x21, 0xb3, 0x1d, 0x31, 0x25, 0x67, 0x08, 0xe4,
	0xe2, 0x40, 0x3f, 0xa3, 0x12, 0xb4, 0x90, 0x33, 0x2b, 0x27, 0xf5, 0x88, 0x7a, 0xc0, 0x18, 0xef,
	0xf4, 0x67, 0x03, 0x10, 0x5a, 0xd5, 0x18, 0x79, 0x9f, 0xd1, 0xb2, 0x6e, 0x6a, 0xa0, 0x35, 0xe2,
	0xef, 0x10, 0x1f, 0x3e, 0xd9, 0xab, 0x66, 0x92, 0xb1, 0x58, 0xa4, 0x0f, 0xd8, 0x0d, 0x25, 0xfc,
	0x3d, 0x9a, 0x6e, 0x40, 0x8c, 0x23, 0xc8, 0x2a, 0xe4, 0x16, 0xe6, 0x0c, 0x01, 0x5d, 0xea, 0x83,
	0x9a, 0xba, 0x64, 0x0f, 0xdd, 0xaa, 0x06, 0x2e, 0x6e, 0x4b, 0x6e, 0xd6, 0x58, 0xba, 0x3e, 0x36,
	0x96, 0xdf, 0x22, 0x03, 0x56, 0xd7, 0xc7, 0x5f, 0x6d, 0xe4, 0xb2, 0x23, 0xd3, 0x6a, 0x35, 0x7d,
	0x3c, 0x6c, 0x13, 0x4d, 0xf5, 0x2e, 0xab, 0xa4, 0x2e, 0xa8, 0x77, 0xf8, 0x92, 0x50, 0x7e, 0x64,
	0x6d, 0xda, 0x31, 0x1f, 0x99, 0x66, 0x8c, 0x07, 0x76, 0xd1, 0xdc, 0x46, 0xfa, 0xd5, 0x03, 0x7e,
	0x44, 0xe0, 0xcb, 0x84, 0xc7, 0x82, 0x30, 0xa8, 0x42, 0x44, 0x95, 0x73, 0x85, 0x98, 0x12, 0x73,
	0x44, 0x23, 0x21, 0x04, 0x93, 0xd6, 0x90, 0x88, 0x7c, 0xc5, 0xd8, 0x11, 0xfc, 0xe8, 0x86, 0x3f,
	0x45, 0xae, 0x62, 0xec, 0x88, 0x66, 0x4c, 0xc3, 0x70, 0x68, 0x44, 0xbe, 0x62, 0xb4, 0x08, 0x0f,
	0x95, 0xd2, 0xb3, 0x14, 0xae, 0xba, 0x53, 0x4f, 0xf4, 0xe3, 0x36, 0x94, 0x8c, 0x16, 0xb2, 0x8d,
	0x26, 0xd3, 0xdf, 0x04, 0xbf, 0xd6, 0xa8, 0x33, 0xbb, 0xac, 0xff, 0x3b, 0x70, 0x51, 0x80, 0xe6,
	0x8d, 0x5e, 0x46, 0xda, 0x47, 0xb3, 0xd2, 0xd0, 0x5f, 0x97, 0x8f, 0xfa, 0x67, 0x1a, 0xdf, 0x94,
	0x86, 0x74, 0x25, 0xc0, 0x47, 0x25, 0xa9, 0x37, 0xbd, 0x23, 0xf0, 0x93, 0x00, 0x93, 0xd6, 0x0e,
	0x39, 0xa4, 0xc3, 0x17, 0xfe, 0xb4, 0xdf, 0xcb, 0x4d, 0xd7, 0x3e, 0x94, 0x13, 0x69, 0x59, 0x6f,
	0x97, 0xe7, 0xf4, 0x99, 0xca, 0xae, 0x2e, 0xf7, 0x33, 0x4d, 0xf7, 0xe9, 0x03, 0x9a, 0xde, 0x0b,
	0x7d, 0x37, 0x06, 0xc9, 0x5c, 0x94, 0x5f, 0x34, 0x69, 0xf8, 0x97, 0x42, 0xa7, 0x67, 0x6f, 0x40,
	0xab, 0xc6, 0x25, 0xd0, 0xef, 0xd0, 0x9d, 0x66, 0x72, 0xc0, 0xbc, 0x08, 0x1f, 0xc0, 0x2e, 0xdd,
	0xe0, 0x3f, 0xd6, 0xf6, 0xc3, 0xec, 0x25, 0x9b, 0xb7, 0x04, 0x7d, 0x46, 0x76, 0x1a, 0x90, 0x78,
	0x9b, 0x06, 0x3e, 0x44, 0x4b, 0x85, 0x17, 0x56, 0xe5, 0xf9, 0xe9, 0x99, 0x53, 0xf8, 0x79, 0xe6,
	0x14, 0xce, 0xcf, 0x1c, 0xeb, 0x4b, 0xd7, 0xb1, 0xbe, 0x77, 0x1d, 0xeb, 0x47, 0xd7, 0xb1, 0x4e,
	0xbb, 0x8e, 0xf5, 0xab, 0xeb, 0x58, 0x7f, 0xba, 0x4e, 0xe1, 0xbc, 0xeb, 0x58, 0x5f, 0x7f, 0x3b,
	0x85, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x63, 0x0a, 0xf3, 0x52, 0xec, 0x0b, 0x00, 0x00,
}
