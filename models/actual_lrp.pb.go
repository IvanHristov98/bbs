// Code generated by protoc-gen-gogo.
// source: actual_lrp.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PlacementStateType int32

const (
	PlacementStateType_Normal     PlacementStateType = 0
	PlacementStateType_Evacuating PlacementStateType = 1
)

var PlacementStateType_name = map[int32]string{
	0: "Normal",
	1: "Evacuating",
}
var PlacementStateType_value = map[string]int32{
	"Normal":     0,
	"Evacuating": 1,
}

func (x PlacementStateType) Enum() *PlacementStateType {
	p := new(PlacementStateType)
	*p = x
	return p
}
func (x PlacementStateType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(PlacementStateType_name, int32(x))
}
func (x *PlacementStateType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlacementStateType_value, data, "PlacementStateType")
	if err != nil {
		return err
	}
	*x = PlacementStateType(value)
	return nil
}
func (PlacementStateType) EnumDescriptor() ([]byte, []int) { return fileDescriptorActualLrp, []int{0} }

type ActualLRPGroup struct {
	Instance   *ActualLRP `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	Evacuating *ActualLRP `protobuf:"bytes,2,opt,name=evacuating" json:"evacuating,omitempty"`
}

func (m *ActualLRPGroup) Reset()                    { *m = ActualLRPGroup{} }
func (*ActualLRPGroup) ProtoMessage()               {}
func (*ActualLRPGroup) Descriptor() ([]byte, []int) { return fileDescriptorActualLrp, []int{0} }

func (m *ActualLRPGroup) GetInstance() *ActualLRP {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *ActualLRPGroup) GetEvacuating() *ActualLRP {
	if m != nil {
		return m.Evacuating
	}
	return nil
}

type PortMapping struct {
	ContainerPort         uint32 `protobuf:"varint,1,opt,name=container_port,json=containerPort" json:"container_port"`
	HostPort              uint32 `protobuf:"varint,2,opt,name=host_port,json=hostPort" json:"host_port"`
	ContainerTlsProxyPort uint32 `protobuf:"varint,3,opt,name=container_tls_proxy_port,json=containerTlsProxyPort" json:"container_tls_proxy_port,omitempty"`
	HostTlsProxyPort      uint32 `protobuf:"varint,4,opt,name=host_tls_proxy_port,json=hostTlsProxyPort" json:"host_tls_proxy_port,omitempty"`
}

func (m *PortMapping) Reset()                    { *m = PortMapping{} }
func (*PortMapping) ProtoMessage()               {}
func (*PortMapping) Descriptor() ([]byte, []int) { return fileDescriptorActualLrp, []int{1} }

func (m *PortMapping) GetContainerPort() uint32 {
	if m != nil {
		return m.ContainerPort
	}
	return 0
}

func (m *PortMapping) GetHostPort() uint32 {
	if m != nil {
		return m.HostPort
	}
	return 0
}

func (m *PortMapping) GetContainerTlsProxyPort() uint32 {
	if m != nil {
		return m.ContainerTlsProxyPort
	}
	return 0
}

func (m *PortMapping) GetHostTlsProxyPort() uint32 {
	if m != nil {
		return m.HostTlsProxyPort
	}
	return 0
}

type ActualLRPKey struct {
	ProcessGuid string `protobuf:"bytes,1,opt,name=process_guid,json=processGuid" json:"process_guid"`
	Index       int32  `protobuf:"varint,2,opt,name=index" json:"index"`
	Domain      string `protobuf:"bytes,3,opt,name=domain" json:"domain"`
}

func (m *ActualLRPKey) Reset()                    { *m = ActualLRPKey{} }
func (*ActualLRPKey) ProtoMessage()               {}
func (*ActualLRPKey) Descriptor() ([]byte, []int) { return fileDescriptorActualLrp, []int{2} }

func (m *ActualLRPKey) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

func (m *ActualLRPKey) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ActualLRPKey) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type ActualLRPInstanceKey struct {
	InstanceGuid string `protobuf:"bytes,1,opt,name=instance_guid,json=instanceGuid" json:"instance_guid"`
	CellId       string `protobuf:"bytes,2,opt,name=cell_id,json=cellId" json:"cell_id"`
}

func (m *ActualLRPInstanceKey) Reset()                    { *m = ActualLRPInstanceKey{} }
func (*ActualLRPInstanceKey) ProtoMessage()               {}
func (*ActualLRPInstanceKey) Descriptor() ([]byte, []int) { return fileDescriptorActualLrp, []int{3} }

func (m *ActualLRPInstanceKey) GetInstanceGuid() string {
	if m != nil {
		return m.InstanceGuid
	}
	return ""
}

func (m *ActualLRPInstanceKey) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

type ActualLRPNetInfo struct {
	Address         string         `protobuf:"bytes,1,opt,name=address" json:"address"`
	Ports           []*PortMapping `protobuf:"bytes,2,rep,name=ports" json:"ports"`
	InstanceAddress string         `protobuf:"bytes,3,opt,name=instance_address,json=instanceAddress" json:"instance_address,omitempty"`
}

func (m *ActualLRPNetInfo) Reset()                    { *m = ActualLRPNetInfo{} }
func (*ActualLRPNetInfo) ProtoMessage()               {}
func (*ActualLRPNetInfo) Descriptor() ([]byte, []int) { return fileDescriptorActualLrp, []int{4} }

func (m *ActualLRPNetInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ActualLRPNetInfo) GetPorts() []*PortMapping {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ActualLRPNetInfo) GetInstanceAddress() string {
	if m != nil {
		return m.InstanceAddress
	}
	return ""
}

type ActualLRP struct {
	ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,embedded=actual_lrp_key" json:""`
	ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,embedded=actual_lrp_instance_key" json:""`
	ActualLRPNetInfo     `protobuf:"bytes,3,opt,name=actual_lrp_net_info,json=actualLrpNetInfo,embedded=actual_lrp_net_info" json:""`
	CrashCount           int32              `protobuf:"varint,4,opt,name=crash_count,json=crashCount" json:"crash_count"`
	CrashReason          string             `protobuf:"bytes,5,opt,name=crash_reason,json=crashReason" json:"crash_reason,omitempty"`
	State                string             `protobuf:"bytes,6,opt,name=state" json:"state"`
	PlacementError       string             `protobuf:"bytes,7,opt,name=placement_error,json=placementError" json:"placement_error,omitempty"`
	Since                int64              `protobuf:"varint,8,opt,name=since" json:"since"`
	ModificationTag      ModificationTag    `protobuf:"bytes,9,opt,name=modification_tag,json=modificationTag" json:"modification_tag"`
	PlacementState       PlacementStateType `protobuf:"varint,10,opt,name=placement_state,json=placementState,enum=models.PlacementStateType" json:"placement_state"`
}

func (m *ActualLRP) Reset()                    { *m = ActualLRP{} }
func (*ActualLRP) ProtoMessage()               {}
func (*ActualLRP) Descriptor() ([]byte, []int) { return fileDescriptorActualLrp, []int{5} }

func (m *ActualLRP) GetCrashCount() int32 {
	if m != nil {
		return m.CrashCount
	}
	return 0
}

func (m *ActualLRP) GetCrashReason() string {
	if m != nil {
		return m.CrashReason
	}
	return ""
}

func (m *ActualLRP) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ActualLRP) GetPlacementError() string {
	if m != nil {
		return m.PlacementError
	}
	return ""
}

func (m *ActualLRP) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ActualLRP) GetModificationTag() ModificationTag {
	if m != nil {
		return m.ModificationTag
	}
	return ModificationTag{}
}

func (m *ActualLRP) GetPlacementState() PlacementStateType {
	if m != nil {
		return m.PlacementState
	}
	return PlacementStateType_Normal
}

type ActualLRPInfo struct {
	ActualLRPNetInfo `protobuf:"bytes,1,opt,name=actual_lrp_net_info,json=actualLrpNetInfo,embedded=actual_lrp_net_info" json:""`
	CrashCount       int32              `protobuf:"varint,2,opt,name=crash_count,json=crashCount" json:"crash_count"`
	CrashReason      string             `protobuf:"bytes,3,opt,name=crash_reason,json=crashReason" json:"crash_reason,omitempty"`
	State            string             `protobuf:"bytes,4,opt,name=state" json:"state"`
	PlacementState   PlacementStateType `protobuf:"varint,5,opt,name=placement_state,json=placementState,enum=models.PlacementStateType" json:"placement_state"`
	PlacementError   string             `protobuf:"bytes,6,opt,name=placement_error,json=placementError" json:"placement_error,omitempty"`
	Since            int64              `protobuf:"varint,7,opt,name=since" json:"since"`
	ModificationTag  ModificationTag    `protobuf:"bytes,8,opt,name=modification_tag,json=modificationTag" json:"modification_tag"`
}

func (m *ActualLRPInfo) Reset()                    { *m = ActualLRPInfo{} }
func (*ActualLRPInfo) ProtoMessage()               {}
func (*ActualLRPInfo) Descriptor() ([]byte, []int) { return fileDescriptorActualLrp, []int{6} }

func (m *ActualLRPInfo) GetCrashCount() int32 {
	if m != nil {
		return m.CrashCount
	}
	return 0
}

func (m *ActualLRPInfo) GetCrashReason() string {
	if m != nil {
		return m.CrashReason
	}
	return ""
}

func (m *ActualLRPInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ActualLRPInfo) GetPlacementState() PlacementStateType {
	if m != nil {
		return m.PlacementState
	}
	return PlacementStateType_Normal
}

func (m *ActualLRPInfo) GetPlacementError() string {
	if m != nil {
		return m.PlacementError
	}
	return ""
}

func (m *ActualLRPInfo) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ActualLRPInfo) GetModificationTag() ModificationTag {
	if m != nil {
		return m.ModificationTag
	}
	return ModificationTag{}
}

func init() {
	proto.RegisterType((*ActualLRPGroup)(nil), "models.ActualLRPGroup")
	proto.RegisterType((*PortMapping)(nil), "models.PortMapping")
	proto.RegisterType((*ActualLRPKey)(nil), "models.ActualLRPKey")
	proto.RegisterType((*ActualLRPInstanceKey)(nil), "models.ActualLRPInstanceKey")
	proto.RegisterType((*ActualLRPNetInfo)(nil), "models.ActualLRPNetInfo")
	proto.RegisterType((*ActualLRP)(nil), "models.ActualLRP")
	proto.RegisterType((*ActualLRPInfo)(nil), "models.ActualLRPInfo")
	proto.RegisterEnum("models.PlacementStateType", PlacementStateType_name, PlacementStateType_value)
}
func (x PlacementStateType) String() string {
	s, ok := PlacementStateType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ActualLRPGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPGroup)
	if !ok {
		that2, ok := that.(ActualLRPGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Instance.Equal(that1.Instance) {
		return false
	}
	if !this.Evacuating.Equal(that1.Evacuating) {
		return false
	}
	return true
}
func (this *PortMapping) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PortMapping)
	if !ok {
		that2, ok := that.(PortMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainerPort != that1.ContainerPort {
		return false
	}
	if this.HostPort != that1.HostPort {
		return false
	}
	if this.ContainerTlsProxyPort != that1.ContainerTlsProxyPort {
		return false
	}
	if this.HostTlsProxyPort != that1.HostTlsProxyPort {
		return false
	}
	return true
}
func (this *ActualLRPKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPKey)
	if !ok {
		that2, ok := that.(ActualLRPKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *ActualLRPInstanceKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPInstanceKey)
	if !ok {
		that2, ok := that.(ActualLRPInstanceKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InstanceGuid != that1.InstanceGuid {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	return true
}
func (this *ActualLRPNetInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPNetInfo)
	if !ok {
		that2, ok := that.(ActualLRPNetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if !this.Ports[i].Equal(that1.Ports[i]) {
			return false
		}
	}
	if this.InstanceAddress != that1.InstanceAddress {
		return false
	}
	return true
}
func (this *ActualLRP) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRP)
	if !ok {
		that2, ok := that.(ActualLRP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ActualLRPKey.Equal(&that1.ActualLRPKey) {
		return false
	}
	if !this.ActualLRPInstanceKey.Equal(&that1.ActualLRPInstanceKey) {
		return false
	}
	if !this.ActualLRPNetInfo.Equal(&that1.ActualLRPNetInfo) {
		return false
	}
	if this.CrashCount != that1.CrashCount {
		return false
	}
	if this.CrashReason != that1.CrashReason {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.PlacementError != that1.PlacementError {
		return false
	}
	if this.Since != that1.Since {
		return false
	}
	if !this.ModificationTag.Equal(&that1.ModificationTag) {
		return false
	}
	if this.PlacementState != that1.PlacementState {
		return false
	}
	return true
}
func (this *ActualLRPInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPInfo)
	if !ok {
		that2, ok := that.(ActualLRPInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ActualLRPNetInfo.Equal(&that1.ActualLRPNetInfo) {
		return false
	}
	if this.CrashCount != that1.CrashCount {
		return false
	}
	if this.CrashReason != that1.CrashReason {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.PlacementState != that1.PlacementState {
		return false
	}
	if this.PlacementError != that1.PlacementError {
		return false
	}
	if this.Since != that1.Since {
		return false
	}
	if !this.ModificationTag.Equal(&that1.ModificationTag) {
		return false
	}
	return true
}
func (this *ActualLRPGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ActualLRPGroup{")
	if this.Instance != nil {
		s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	}
	if this.Evacuating != nil {
		s = append(s, "Evacuating: "+fmt.Sprintf("%#v", this.Evacuating)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortMapping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.PortMapping{")
	s = append(s, "ContainerPort: "+fmt.Sprintf("%#v", this.ContainerPort)+",\n")
	s = append(s, "HostPort: "+fmt.Sprintf("%#v", this.HostPort)+",\n")
	s = append(s, "ContainerTlsProxyPort: "+fmt.Sprintf("%#v", this.ContainerTlsProxyPort)+",\n")
	s = append(s, "HostTlsProxyPort: "+fmt.Sprintf("%#v", this.HostTlsProxyPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.ActualLRPKey{")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPInstanceKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ActualLRPInstanceKey{")
	s = append(s, "InstanceGuid: "+fmt.Sprintf("%#v", this.InstanceGuid)+",\n")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPNetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.ActualLRPNetInfo{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Ports != nil {
		s = append(s, "Ports: "+fmt.Sprintf("%#v", this.Ports)+",\n")
	}
	s = append(s, "InstanceAddress: "+fmt.Sprintf("%#v", this.InstanceAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&models.ActualLRP{")
	s = append(s, "ActualLRPKey: "+strings.Replace(this.ActualLRPKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ActualLRPInstanceKey: "+strings.Replace(this.ActualLRPInstanceKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ActualLRPNetInfo: "+strings.Replace(this.ActualLRPNetInfo.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CrashCount: "+fmt.Sprintf("%#v", this.CrashCount)+",\n")
	s = append(s, "CrashReason: "+fmt.Sprintf("%#v", this.CrashReason)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "PlacementError: "+fmt.Sprintf("%#v", this.PlacementError)+",\n")
	s = append(s, "Since: "+fmt.Sprintf("%#v", this.Since)+",\n")
	s = append(s, "ModificationTag: "+strings.Replace(this.ModificationTag.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "PlacementState: "+fmt.Sprintf("%#v", this.PlacementState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&models.ActualLRPInfo{")
	s = append(s, "ActualLRPNetInfo: "+strings.Replace(this.ActualLRPNetInfo.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CrashCount: "+fmt.Sprintf("%#v", this.CrashCount)+",\n")
	s = append(s, "CrashReason: "+fmt.Sprintf("%#v", this.CrashReason)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "PlacementState: "+fmt.Sprintf("%#v", this.PlacementState)+",\n")
	s = append(s, "PlacementError: "+fmt.Sprintf("%#v", this.PlacementError)+",\n")
	s = append(s, "Since: "+fmt.Sprintf("%#v", this.Since)+",\n")
	s = append(s, "ModificationTag: "+strings.Replace(this.ModificationTag.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActualLrp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ActualLRPGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Instance != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.Instance.Size()))
		n1, err := m.Instance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Evacuating != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActualLrp(dAtA, i, uint64(m.Evacuating.Size()))
		n2, err := m.Evacuating.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PortMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ContainerPort))
	dAtA[i] = 0x10
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.HostPort))
	dAtA[i] = 0x18
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ContainerTlsProxyPort))
	dAtA[i] = 0x20
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.HostTlsProxyPort))
	return i, nil
}

func (m *ActualLRPKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.ProcessGuid)))
	i += copy(dAtA[i:], m.ProcessGuid)
	dAtA[i] = 0x10
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.Index))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.Domain)))
	i += copy(dAtA[i:], m.Domain)
	return i, nil
}

func (m *ActualLRPInstanceKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPInstanceKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.InstanceGuid)))
	i += copy(dAtA[i:], m.InstanceGuid)
	dAtA[i] = 0x12
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.CellId)))
	i += copy(dAtA[i:], m.CellId)
	return i, nil
}

func (m *ActualLRPNetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPNetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			dAtA[i] = 0x12
			i++
			i = encodeVarintActualLrp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.InstanceAddress)))
	i += copy(dAtA[i:], m.InstanceAddress)
	return i, nil
}

func (m *ActualLRP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ActualLRPKey.Size()))
	n3, err := m.ActualLRPKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ActualLRPInstanceKey.Size()))
	n4, err := m.ActualLRPInstanceKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ActualLRPNetInfo.Size()))
	n5, err := m.ActualLRPNetInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x20
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.CrashCount))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.CrashReason)))
	i += copy(dAtA[i:], m.CrashReason)
	dAtA[i] = 0x32
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.State)))
	i += copy(dAtA[i:], m.State)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.PlacementError)))
	i += copy(dAtA[i:], m.PlacementError)
	dAtA[i] = 0x40
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.Since))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ModificationTag.Size()))
	n6, err := m.ModificationTag.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x50
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.PlacementState))
	return i, nil
}

func (m *ActualLRPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ActualLRPNetInfo.Size()))
	n7, err := m.ActualLRPNetInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x10
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.CrashCount))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.CrashReason)))
	i += copy(dAtA[i:], m.CrashReason)
	dAtA[i] = 0x22
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.State)))
	i += copy(dAtA[i:], m.State)
	dAtA[i] = 0x28
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.PlacementState))
	dAtA[i] = 0x32
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(len(m.PlacementError)))
	i += copy(dAtA[i:], m.PlacementError)
	dAtA[i] = 0x38
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.Since))
	dAtA[i] = 0x42
	i++
	i = encodeVarintActualLrp(dAtA, i, uint64(m.ModificationTag.Size()))
	n8, err := m.ModificationTag.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func encodeFixed64ActualLrp(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ActualLrp(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintActualLrp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ActualLRPGroup) Size() (n int) {
	var l int
	_ = l
	if m.Instance != nil {
		l = m.Instance.Size()
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.Evacuating != nil {
		l = m.Evacuating.Size()
		n += 1 + l + sovActualLrp(uint64(l))
	}
	return n
}

func (m *PortMapping) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovActualLrp(uint64(m.ContainerPort))
	n += 1 + sovActualLrp(uint64(m.HostPort))
	n += 1 + sovActualLrp(uint64(m.ContainerTlsProxyPort))
	n += 1 + sovActualLrp(uint64(m.HostTlsProxyPort))
	return n
}

func (m *ActualLRPKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProcessGuid)
	n += 1 + l + sovActualLrp(uint64(l))
	n += 1 + sovActualLrp(uint64(m.Index))
	l = len(m.Domain)
	n += 1 + l + sovActualLrp(uint64(l))
	return n
}

func (m *ActualLRPInstanceKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.InstanceGuid)
	n += 1 + l + sovActualLrp(uint64(l))
	l = len(m.CellId)
	n += 1 + l + sovActualLrp(uint64(l))
	return n
}

func (m *ActualLRPNetInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovActualLrp(uint64(l))
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovActualLrp(uint64(l))
		}
	}
	l = len(m.InstanceAddress)
	n += 1 + l + sovActualLrp(uint64(l))
	return n
}

func (m *ActualLRP) Size() (n int) {
	var l int
	_ = l
	l = m.ActualLRPKey.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	l = m.ActualLRPInstanceKey.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	l = m.ActualLRPNetInfo.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	n += 1 + sovActualLrp(uint64(m.CrashCount))
	l = len(m.CrashReason)
	n += 1 + l + sovActualLrp(uint64(l))
	l = len(m.State)
	n += 1 + l + sovActualLrp(uint64(l))
	l = len(m.PlacementError)
	n += 1 + l + sovActualLrp(uint64(l))
	n += 1 + sovActualLrp(uint64(m.Since))
	l = m.ModificationTag.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	n += 1 + sovActualLrp(uint64(m.PlacementState))
	return n
}

func (m *ActualLRPInfo) Size() (n int) {
	var l int
	_ = l
	l = m.ActualLRPNetInfo.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	n += 1 + sovActualLrp(uint64(m.CrashCount))
	l = len(m.CrashReason)
	n += 1 + l + sovActualLrp(uint64(l))
	l = len(m.State)
	n += 1 + l + sovActualLrp(uint64(l))
	n += 1 + sovActualLrp(uint64(m.PlacementState))
	l = len(m.PlacementError)
	n += 1 + l + sovActualLrp(uint64(l))
	n += 1 + sovActualLrp(uint64(m.Since))
	l = m.ModificationTag.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	return n
}

func sovActualLrp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActualLrp(x uint64) (n int) {
	return sovActualLrp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ActualLRPGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPGroup{`,
		`Instance:` + strings.Replace(fmt.Sprintf("%v", this.Instance), "ActualLRP", "ActualLRP", 1) + `,`,
		`Evacuating:` + strings.Replace(fmt.Sprintf("%v", this.Evacuating), "ActualLRP", "ActualLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortMapping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortMapping{`,
		`ContainerPort:` + fmt.Sprintf("%v", this.ContainerPort) + `,`,
		`HostPort:` + fmt.Sprintf("%v", this.HostPort) + `,`,
		`ContainerTlsProxyPort:` + fmt.Sprintf("%v", this.ContainerTlsProxyPort) + `,`,
		`HostTlsProxyPort:` + fmt.Sprintf("%v", this.HostTlsProxyPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPKey{`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPInstanceKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPInstanceKey{`,
		`InstanceGuid:` + fmt.Sprintf("%v", this.InstanceGuid) + `,`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPNetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPNetInfo{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Ports:` + strings.Replace(fmt.Sprintf("%v", this.Ports), "PortMapping", "PortMapping", 1) + `,`,
		`InstanceAddress:` + fmt.Sprintf("%v", this.InstanceAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRP{`,
		`ActualLRPKey:` + strings.Replace(strings.Replace(this.ActualLRPKey.String(), "ActualLRPKey", "ActualLRPKey", 1), `&`, ``, 1) + `,`,
		`ActualLRPInstanceKey:` + strings.Replace(strings.Replace(this.ActualLRPInstanceKey.String(), "ActualLRPInstanceKey", "ActualLRPInstanceKey", 1), `&`, ``, 1) + `,`,
		`ActualLRPNetInfo:` + strings.Replace(strings.Replace(this.ActualLRPNetInfo.String(), "ActualLRPNetInfo", "ActualLRPNetInfo", 1), `&`, ``, 1) + `,`,
		`CrashCount:` + fmt.Sprintf("%v", this.CrashCount) + `,`,
		`CrashReason:` + fmt.Sprintf("%v", this.CrashReason) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`PlacementError:` + fmt.Sprintf("%v", this.PlacementError) + `,`,
		`Since:` + fmt.Sprintf("%v", this.Since) + `,`,
		`ModificationTag:` + strings.Replace(strings.Replace(this.ModificationTag.String(), "ModificationTag", "ModificationTag", 1), `&`, ``, 1) + `,`,
		`PlacementState:` + fmt.Sprintf("%v", this.PlacementState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPInfo{`,
		`ActualLRPNetInfo:` + strings.Replace(strings.Replace(this.ActualLRPNetInfo.String(), "ActualLRPNetInfo", "ActualLRPNetInfo", 1), `&`, ``, 1) + `,`,
		`CrashCount:` + fmt.Sprintf("%v", this.CrashCount) + `,`,
		`CrashReason:` + fmt.Sprintf("%v", this.CrashReason) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`PlacementState:` + fmt.Sprintf("%v", this.PlacementState) + `,`,
		`PlacementError:` + fmt.Sprintf("%v", this.PlacementError) + `,`,
		`Since:` + fmt.Sprintf("%v", this.Since) + `,`,
		`ModificationTag:` + strings.Replace(strings.Replace(this.ModificationTag.String(), "ModificationTag", "ModificationTag", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActualLrp(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ActualLRPGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instance == nil {
				m.Instance = &ActualLRP{}
			}
			if err := m.Instance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evacuating", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evacuating == nil {
				m.Evacuating = &ActualLRP{}
			}
			if err := m.Evacuating.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPort", wireType)
			}
			m.ContainerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainerPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPort", wireType)
			}
			m.HostPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerTlsProxyPort", wireType)
			}
			m.ContainerTlsProxyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainerTlsProxyPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostTlsProxyPort", wireType)
			}
			m.HostTlsProxyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostTlsProxyPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPInstanceKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPInstanceKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPInstanceKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPNetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPNetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPNetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &PortMapping{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPInstanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPNetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPNetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashCount", wireType)
			}
			m.CrashCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrashCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrashReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Since |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModificationTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementState", wireType)
			}
			m.PlacementState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacementState |= (PlacementStateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPNetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPNetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashCount", wireType)
			}
			m.CrashCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrashCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrashReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementState", wireType)
			}
			m.PlacementState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacementState |= (PlacementStateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Since |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActualLrp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModificationTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActualLrp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActualLrp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActualLrp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActualLrp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActualLrp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActualLrp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActualLrp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActualLrp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actual_lrp.proto", fileDescriptorActualLrp) }

var fileDescriptorActualLrp = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xd1, 0x6e, 0xdb, 0x36,
	0x14, 0x35, 0xed, 0xd8, 0x89, 0xaf, 0x1d, 0xc7, 0x63, 0xb2, 0x56, 0x33, 0x5a, 0x25, 0x15, 0x50,
	0x2c, 0xeb, 0xda, 0x74, 0x0b, 0xf6, 0x03, 0xc9, 0x50, 0xb4, 0x59, 0x9b, 0x22, 0xf0, 0xb2, 0x67,
	0x8d, 0x95, 0x68, 0x87, 0x98, 0x24, 0x6a, 0x14, 0x3d, 0xd4, 0x6f, 0xfb, 0x84, 0x61, 0x4f, 0xfb,
	0x84, 0xfd, 0xc1, 0x7e, 0xa1, 0x8f, 0x79, 0xdc, 0x53, 0xb0, 0x78, 0x2f, 0x5b, 0x9e, 0xfa, 0x09,
	0x03, 0x49, 0x89, 0x61, 0xed, 0x04, 0x28, 0x9a, 0x3d, 0x25, 0xba, 0xe7, 0xdc, 0x73, 0xc8, 0x7b,
	0xae, 0x64, 0xe8, 0x93, 0x48, 0x4e, 0x48, 0x12, 0x26, 0x22, 0xdf, 0xc9, 0x05, 0x97, 0x1c, 0xb7,
	0x52, 0x1e, 0xd3, 0xa4, 0x18, 0x3c, 0x1a, 0x33, 0x79, 0x32, 0x79, 0xb5, 0x13, 0xf1, 0xf4, 0xf1,
	0x98, 0x8f, 0xf9, 0x63, 0x0d, 0xbf, 0x9a, 0x8c, 0xf4, 0x93, 0x7e, 0xd0, 0xff, 0x99, 0xb6, 0xc1,
	0xad, 0x94, 0xc7, 0x6c, 0xc4, 0x22, 0x22, 0x19, 0xcf, 0x42, 0x49, 0xc6, 0xa6, 0x1e, 0x08, 0xe8,
	0xed, 0x69, 0x8b, 0x17, 0xc3, 0xa3, 0xa7, 0x82, 0x4f, 0x72, 0xfc, 0x08, 0x56, 0x58, 0x56, 0x48,
	0x92, 0x45, 0xd4, 0x43, 0x5b, 0x68, 0xbb, 0xb3, 0xfb, 0xd1, 0x8e, 0xf1, 0xdc, 0xb1, 0xcc, 0xa1,
	0xa5, 0xe0, 0x2f, 0x01, 0xe8, 0x4f, 0x24, 0x9a, 0x10, 0xc9, 0xb2, 0xb1, 0x57, 0xbf, 0xae, 0xc1,
	0x21, 0x05, 0xbf, 0xd5, 0xa1, 0x73, 0xc4, 0x85, 0x3c, 0x24, 0x79, 0xce, 0xb2, 0x31, 0xfe, 0x1c,
	0x7a, 0x11, 0xcf, 0x24, 0x61, 0x19, 0x15, 0x61, 0xce, 0x85, 0xd4, 0xbe, 0xab, 0xfb, 0x4b, 0x6f,
	0xce, 0x36, 0x6b, 0xc3, 0x55, 0x8b, 0xa9, 0x1e, 0x7c, 0x0f, 0xda, 0x27, 0xbc, 0x90, 0x86, 0x57,
	0x77, 0x78, 0x2b, 0xaa, 0xac, 0x29, 0x11, 0x78, 0x97, 0x7a, 0x32, 0x29, 0xc2, 0x5c, 0xf0, 0xd7,
	0x53, 0xd3, 0xd1, 0xd0, 0x1d, 0x0f, 0x54, 0xc7, 0xc5, 0xd9, 0x66, 0x70, 0x1d, 0xef, 0x21, 0x4f,
	0x99, 0xa4, 0x69, 0x2e, 0xa7, 0xc3, 0x8f, 0x2d, 0xe7, 0x38, 0x29, 0x8e, 0x14, 0x43, 0x9b, 0x1c,
	0xc3, 0xba, 0x3e, 0xc7, 0x9c, 0xfe, 0x92, 0xd6, 0xbf, 0x5f, 0xea, 0xdf, 0xbd, 0x82, 0xe2, 0x48,
	0xf7, 0x15, 0xec, 0xaa, 0x06, 0x3f, 0x42, 0xd7, 0xce, 0xec, 0x39, 0x9d, 0xe2, 0x4f, 0xa1, 0x9b,
	0x0b, 0x1e, 0xd1, 0xa2, 0x08, 0xc7, 0x13, 0x16, 0xeb, 0xc1, 0xb4, 0xcb, 0x0b, 0x77, 0x4a, 0xe4,
	0xe9, 0x84, 0xc5, 0x78, 0x00, 0x4d, 0x96, 0xc5, 0xf4, 0xb5, 0x1e, 0x49, 0xb3, 0x64, 0x98, 0x12,
	0xbe, 0x03, 0xad, 0x98, 0xa7, 0x84, 0x65, 0xfa, 0xf6, 0x55, 0x7b, 0x59, 0x0b, 0xbe, 0x87, 0x0d,
	0x6b, 0x79, 0x50, 0xa6, 0xaa, 0xac, 0x3f, 0x83, 0xd5, 0x2a, 0xe4, 0x45, 0xef, 0x6e, 0x05, 0x69,
	0xf3, 0xbb, 0xb0, 0x1c, 0xd1, 0x24, 0x09, 0x59, 0xac, 0xed, 0xad, 0x83, 0x2a, 0x1e, 0xc4, 0xc1,
	0x1f, 0x08, 0xfa, 0xd6, 0xe2, 0x25, 0x95, 0x07, 0xd9, 0x88, 0x63, 0x1f, 0x96, 0x49, 0x1c, 0x0b,
	0x5a, 0x14, 0xef, 0x08, 0x57, 0x45, 0xfc, 0x15, 0x34, 0xd5, 0xb4, 0x0a, 0xaf, 0xbe, 0xd5, 0xd8,
	0xee, 0xec, 0xae, 0x57, 0x2b, 0xe5, 0x2c, 0xce, 0x7e, 0xfb, 0xe2, 0x6c, 0xd3, 0xb0, 0x86, 0xe6,
	0x0f, 0x3e, 0x84, 0xbe, 0x3d, 0x74, 0x25, 0x6f, 0x2e, 0x1d, 0x94, 0x91, 0x0c, 0xe6, 0x71, 0x27,
	0x8f, 0xb5, 0x0a, 0xdb, 0x33, 0x50, 0xf0, 0x6b, 0x13, 0xda, 0xf6, 0xe4, 0xf8, 0x19, 0xf4, 0x2e,
	0x5f, 0xc7, 0xf0, 0x07, 0x3a, 0x2d, 0xdf, 0x8f, 0x8d, 0x85, 0x75, 0x7f, 0x4e, 0xa7, 0xfb, 0x5d,
	0x65, 0x78, 0x7a, 0xb6, 0x89, 0x2e, 0xf4, 0xc0, 0x4c, 0xe7, 0x0b, 0x91, 0xab, 0xd9, 0x12, 0xb8,
	0xed, 0x28, 0xd9, 0x13, 0x29, 0x49, 0xf3, 0x06, 0xdd, 0x59, 0x90, 0x74, 0xa2, 0x99, 0x93, 0xde,
	0xb0, 0xd2, 0x6e, 0x7c, 0xdf, 0xc1, 0xba, 0x63, 0x91, 0x51, 0x19, 0xb2, 0x6c, 0xc4, 0xf5, 0x30,
	0x3a, 0xbb, 0xde, 0x82, 0x7c, 0x19, 0xcb, 0x9c, 0x74, 0xdf, 0x4a, 0x57, 0xb1, 0xdd, 0x87, 0x4e,
	0x24, 0x48, 0x71, 0x12, 0x46, 0x7c, 0x92, 0x99, 0x75, 0xaf, 0xb6, 0x0d, 0x34, 0xf0, 0xb5, 0xaa,
	0xe3, 0x3d, 0xe8, 0x1a, 0x9a, 0xa0, 0xa4, 0xe0, 0x99, 0xd7, 0xd4, 0x19, 0xf8, 0x65, 0x06, 0xb7,
	0x5c, 0xcc, 0x99, 0xbf, 0x91, 0x1e, 0xea, 0xb2, 0xda, 0xe8, 0x42, 0x12, 0x49, 0xbd, 0x96, 0xb3,
	0x1e, 0xa6, 0x84, 0xbf, 0x81, 0xb5, 0x3c, 0x21, 0x11, 0x4d, 0x69, 0x26, 0x43, 0x2a, 0x04, 0x17,
	0xde, 0xb2, 0x66, 0xdd, 0x2b, 0x1d, 0x3e, 0x99, 0x83, 0x1d, 0x93, 0x9e, 0x85, 0x9e, 0x28, 0x44,
	0xfb, 0x30, 0xf5, 0xb1, 0x5b, 0xd9, 0x42, 0xdb, 0x0d, 0xeb, 0xa3, 0x4a, 0xf8, 0x19, 0xf4, 0xe7,
	0xbf, 0x9b, 0x5e, 0x5b, 0x4f, 0xf0, 0x76, 0x35, 0xc1, 0x43, 0x07, 0x3f, 0x26, 0xe3, 0xb2, 0x7f,
	0x2d, 0x7d, 0xb7, 0x8c, 0x0f, 0xdc, 0x13, 0x9b, 0x7b, 0xc1, 0x16, 0xda, 0xee, 0xed, 0x0e, 0xec,
	0x62, 0x57, 0xf0, 0xb7, 0x0a, 0x3d, 0x9e, 0xe6, 0xb4, 0xd4, 0xba, 0x3c, 0xb0, 0x46, 0x82, 0x7f,
	0x1b, 0xb0, 0xea, 0xac, 0xc5, 0x88, 0x5f, 0x97, 0x35, 0xfa, 0x7f, 0xb3, 0xae, 0xbf, 0x67, 0xd6,
	0x8d, 0x1b, 0x64, 0xbd, 0xb4, 0x98, 0xf5, 0x15, 0x93, 0x6b, 0x7e, 0xd8, 0xe4, 0xae, 0x5a, 0x9b,
	0xd6, 0x8d, 0xd7, 0x66, 0xf9, 0xfd, 0xd6, 0x66, 0xe5, 0x43, 0xd6, 0xe6, 0xc1, 0x17, 0x80, 0x17,
	0x6f, 0x87, 0x01, 0x5a, 0x2f, 0xb9, 0x48, 0x49, 0xd2, 0xaf, 0xe1, 0x1e, 0xc0, 0x13, 0xfb, 0xd3,
	0xda, 0x47, 0xfb, 0x0f, 0x4f, 0xcf, 0x7d, 0xf4, 0xe7, 0xb9, 0x5f, 0x7b, 0x7b, 0xee, 0xa3, 0x9f,
	0x67, 0x3e, 0xfa, 0x7d, 0xe6, 0xa3, 0x37, 0x33, 0x1f, 0x9d, 0xce, 0x7c, 0xf4, 0xd7, 0xcc, 0x47,
	0xff, 0xcc, 0xfc, 0xda, 0xdb, 0x99, 0x8f, 0x7e, 0xf9, 0xdb, 0xaf, 0xfd, 0x17, 0x00, 0x00, 0xff,
	0xff, 0xba, 0xb4, 0x3a, 0x38, 0x60, 0x08, 0x00, 0x00,
}
