// Code generated by protoc-gen-gogo.
// source: events.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ActualLRPCreatedEvent struct {
	ActualLrpGroup *ActualLRPGroup `protobuf:"bytes,1,opt,name=actual_lrp_group,json=actualLrpGroup" json:"actual_lrp_group,omitempty"`
}

func (m *ActualLRPCreatedEvent) Reset()                    { *m = ActualLRPCreatedEvent{} }
func (*ActualLRPCreatedEvent) ProtoMessage()               {}
func (*ActualLRPCreatedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

func (m *ActualLRPCreatedEvent) GetActualLrpGroup() *ActualLRPGroup {
	if m != nil {
		return m.ActualLrpGroup
	}
	return nil
}

type ActualLRPChangedEvent struct {
	Before *ActualLRPGroup `protobuf:"bytes,1,opt,name=before" json:"before,omitempty"`
	After  *ActualLRPGroup `protobuf:"bytes,2,opt,name=after" json:"after,omitempty"`
}

func (m *ActualLRPChangedEvent) Reset()                    { *m = ActualLRPChangedEvent{} }
func (*ActualLRPChangedEvent) ProtoMessage()               {}
func (*ActualLRPChangedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{1} }

func (m *ActualLRPChangedEvent) GetBefore() *ActualLRPGroup {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *ActualLRPChangedEvent) GetAfter() *ActualLRPGroup {
	if m != nil {
		return m.After
	}
	return nil
}

type ActualLRPRemovedEvent struct {
	ActualLrpGroup *ActualLRPGroup `protobuf:"bytes,1,opt,name=actual_lrp_group,json=actualLrpGroup" json:"actual_lrp_group,omitempty"`
}

func (m *ActualLRPRemovedEvent) Reset()                    { *m = ActualLRPRemovedEvent{} }
func (*ActualLRPRemovedEvent) ProtoMessage()               {}
func (*ActualLRPRemovedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{2} }

func (m *ActualLRPRemovedEvent) GetActualLrpGroup() *ActualLRPGroup {
	if m != nil {
		return m.ActualLrpGroup
	}
	return nil
}

type DesiredLRPCreatedEvent struct {
	DesiredLrp *DesiredLRP `protobuf:"bytes,1,opt,name=desired_lrp,json=desiredLrp" json:"desired_lrp,omitempty"`
}

func (m *DesiredLRPCreatedEvent) Reset()                    { *m = DesiredLRPCreatedEvent{} }
func (*DesiredLRPCreatedEvent) ProtoMessage()               {}
func (*DesiredLRPCreatedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{3} }

func (m *DesiredLRPCreatedEvent) GetDesiredLrp() *DesiredLRP {
	if m != nil {
		return m.DesiredLrp
	}
	return nil
}

type DesiredLRPChangedEvent struct {
	Before *DesiredLRP `protobuf:"bytes,1,opt,name=before" json:"before,omitempty"`
	After  *DesiredLRP `protobuf:"bytes,2,opt,name=after" json:"after,omitempty"`
}

func (m *DesiredLRPChangedEvent) Reset()                    { *m = DesiredLRPChangedEvent{} }
func (*DesiredLRPChangedEvent) ProtoMessage()               {}
func (*DesiredLRPChangedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{4} }

func (m *DesiredLRPChangedEvent) GetBefore() *DesiredLRP {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *DesiredLRPChangedEvent) GetAfter() *DesiredLRP {
	if m != nil {
		return m.After
	}
	return nil
}

type DesiredLRPRemovedEvent struct {
	DesiredLrp *DesiredLRP `protobuf:"bytes,1,opt,name=desired_lrp,json=desiredLrp" json:"desired_lrp,omitempty"`
}

func (m *DesiredLRPRemovedEvent) Reset()                    { *m = DesiredLRPRemovedEvent{} }
func (*DesiredLRPRemovedEvent) ProtoMessage()               {}
func (*DesiredLRPRemovedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{5} }

func (m *DesiredLRPRemovedEvent) GetDesiredLrp() *DesiredLRP {
	if m != nil {
		return m.DesiredLrp
	}
	return nil
}

type LRPDeploymentCreatedEvent struct {
	Lrp *LRPDeployment `protobuf:"bytes,1,opt,name=lrp" json:"lrp,omitempty"`
}

func (m *LRPDeploymentCreatedEvent) Reset()                    { *m = LRPDeploymentCreatedEvent{} }
func (*LRPDeploymentCreatedEvent) ProtoMessage()               {}
func (*LRPDeploymentCreatedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{6} }

func (m *LRPDeploymentCreatedEvent) GetLrp() *LRPDeployment {
	if m != nil {
		return m.Lrp
	}
	return nil
}

type LRPDeploymentChangedEvent struct {
	Before *LRPDeployment `protobuf:"bytes,1,opt,name=before" json:"before,omitempty"`
	After  *LRPDeployment `protobuf:"bytes,2,opt,name=after" json:"after,omitempty"`
}

func (m *LRPDeploymentChangedEvent) Reset()                    { *m = LRPDeploymentChangedEvent{} }
func (*LRPDeploymentChangedEvent) ProtoMessage()               {}
func (*LRPDeploymentChangedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{7} }

func (m *LRPDeploymentChangedEvent) GetBefore() *LRPDeployment {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *LRPDeploymentChangedEvent) GetAfter() *LRPDeployment {
	if m != nil {
		return m.After
	}
	return nil
}

type LRPDeploymentRemovedEvent struct {
	Lrp *LRPDeployment `protobuf:"bytes,1,opt,name=lrp" json:"lrp,omitempty"`
}

func (m *LRPDeploymentRemovedEvent) Reset()                    { *m = LRPDeploymentRemovedEvent{} }
func (*LRPDeploymentRemovedEvent) ProtoMessage()               {}
func (*LRPDeploymentRemovedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{8} }

func (m *LRPDeploymentRemovedEvent) GetLrp() *LRPDeployment {
	if m != nil {
		return m.Lrp
	}
	return nil
}

type ActualLRPCrashedEvent struct {
	ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,embedded=actual_lrp_key" json:""`
	ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,embedded=actual_lrp_instance_key" json:""`
	CrashCount           int32  `protobuf:"varint,3,opt,name=crash_count,json=crashCount" json:"crash_count"`
	CrashReason          string `protobuf:"bytes,4,opt,name=crash_reason,json=crashReason" json:"crash_reason,omitempty"`
	Since                int64  `protobuf:"varint,5,opt,name=since" json:"since"`
}

func (m *ActualLRPCrashedEvent) Reset()                    { *m = ActualLRPCrashedEvent{} }
func (*ActualLRPCrashedEvent) ProtoMessage()               {}
func (*ActualLRPCrashedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{9} }

func (m *ActualLRPCrashedEvent) GetCrashCount() int32 {
	if m != nil {
		return m.CrashCount
	}
	return 0
}

func (m *ActualLRPCrashedEvent) GetCrashReason() string {
	if m != nil {
		return m.CrashReason
	}
	return ""
}

func (m *ActualLRPCrashedEvent) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

type EventsByCellId struct {
	CellId string `protobuf:"bytes,1,opt,name=cell_id,json=cellId" json:"cell_id"`
}

func (m *EventsByCellId) Reset()                    { *m = EventsByCellId{} }
func (*EventsByCellId) ProtoMessage()               {}
func (*EventsByCellId) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{10} }

func (m *EventsByCellId) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

type TaskCreatedEvent struct {
	Task *Task `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
}

func (m *TaskCreatedEvent) Reset()                    { *m = TaskCreatedEvent{} }
func (*TaskCreatedEvent) ProtoMessage()               {}
func (*TaskCreatedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{11} }

func (m *TaskCreatedEvent) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type TaskChangedEvent struct {
	Before *Task `protobuf:"bytes,1,opt,name=before" json:"before,omitempty"`
	After  *Task `protobuf:"bytes,2,opt,name=after" json:"after,omitempty"`
}

func (m *TaskChangedEvent) Reset()                    { *m = TaskChangedEvent{} }
func (*TaskChangedEvent) ProtoMessage()               {}
func (*TaskChangedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{12} }

func (m *TaskChangedEvent) GetBefore() *Task {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *TaskChangedEvent) GetAfter() *Task {
	if m != nil {
		return m.After
	}
	return nil
}

type TaskRemovedEvent struct {
	Task *Task `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
}

func (m *TaskRemovedEvent) Reset()                    { *m = TaskRemovedEvent{} }
func (*TaskRemovedEvent) ProtoMessage()               {}
func (*TaskRemovedEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{13} }

func (m *TaskRemovedEvent) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func init() {
	proto.RegisterType((*ActualLRPCreatedEvent)(nil), "models.ActualLRPCreatedEvent")
	proto.RegisterType((*ActualLRPChangedEvent)(nil), "models.ActualLRPChangedEvent")
	proto.RegisterType((*ActualLRPRemovedEvent)(nil), "models.ActualLRPRemovedEvent")
	proto.RegisterType((*DesiredLRPCreatedEvent)(nil), "models.DesiredLRPCreatedEvent")
	proto.RegisterType((*DesiredLRPChangedEvent)(nil), "models.DesiredLRPChangedEvent")
	proto.RegisterType((*DesiredLRPRemovedEvent)(nil), "models.DesiredLRPRemovedEvent")
	proto.RegisterType((*LRPDeploymentCreatedEvent)(nil), "models.LRPDeploymentCreatedEvent")
	proto.RegisterType((*LRPDeploymentChangedEvent)(nil), "models.LRPDeploymentChangedEvent")
	proto.RegisterType((*LRPDeploymentRemovedEvent)(nil), "models.LRPDeploymentRemovedEvent")
	proto.RegisterType((*ActualLRPCrashedEvent)(nil), "models.ActualLRPCrashedEvent")
	proto.RegisterType((*EventsByCellId)(nil), "models.EventsByCellId")
	proto.RegisterType((*TaskCreatedEvent)(nil), "models.TaskCreatedEvent")
	proto.RegisterType((*TaskChangedEvent)(nil), "models.TaskChangedEvent")
	proto.RegisterType((*TaskRemovedEvent)(nil), "models.TaskRemovedEvent")
}
func (this *ActualLRPCreatedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPCreatedEvent)
	if !ok {
		that2, ok := that.(ActualLRPCreatedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ActualLrpGroup.Equal(that1.ActualLrpGroup) {
		return false
	}
	return true
}
func (this *ActualLRPChangedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPChangedEvent)
	if !ok {
		that2, ok := that.(ActualLRPChangedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Before.Equal(that1.Before) {
		return false
	}
	if !this.After.Equal(that1.After) {
		return false
	}
	return true
}
func (this *ActualLRPRemovedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPRemovedEvent)
	if !ok {
		that2, ok := that.(ActualLRPRemovedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ActualLrpGroup.Equal(that1.ActualLrpGroup) {
		return false
	}
	return true
}
func (this *DesiredLRPCreatedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPCreatedEvent)
	if !ok {
		that2, ok := that.(DesiredLRPCreatedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DesiredLrp.Equal(that1.DesiredLrp) {
		return false
	}
	return true
}
func (this *DesiredLRPChangedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPChangedEvent)
	if !ok {
		that2, ok := that.(DesiredLRPChangedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Before.Equal(that1.Before) {
		return false
	}
	if !this.After.Equal(that1.After) {
		return false
	}
	return true
}
func (this *DesiredLRPRemovedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPRemovedEvent)
	if !ok {
		that2, ok := that.(DesiredLRPRemovedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DesiredLrp.Equal(that1.DesiredLrp) {
		return false
	}
	return true
}
func (this *LRPDeploymentCreatedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LRPDeploymentCreatedEvent)
	if !ok {
		that2, ok := that.(LRPDeploymentCreatedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Lrp.Equal(that1.Lrp) {
		return false
	}
	return true
}
func (this *LRPDeploymentChangedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LRPDeploymentChangedEvent)
	if !ok {
		that2, ok := that.(LRPDeploymentChangedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Before.Equal(that1.Before) {
		return false
	}
	if !this.After.Equal(that1.After) {
		return false
	}
	return true
}
func (this *LRPDeploymentRemovedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LRPDeploymentRemovedEvent)
	if !ok {
		that2, ok := that.(LRPDeploymentRemovedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Lrp.Equal(that1.Lrp) {
		return false
	}
	return true
}
func (this *ActualLRPCrashedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPCrashedEvent)
	if !ok {
		that2, ok := that.(ActualLRPCrashedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ActualLRPKey.Equal(&that1.ActualLRPKey) {
		return false
	}
	if !this.ActualLRPInstanceKey.Equal(&that1.ActualLRPInstanceKey) {
		return false
	}
	if this.CrashCount != that1.CrashCount {
		return false
	}
	if this.CrashReason != that1.CrashReason {
		return false
	}
	if this.Since != that1.Since {
		return false
	}
	return true
}
func (this *EventsByCellId) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EventsByCellId)
	if !ok {
		that2, ok := that.(EventsByCellId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	return true
}
func (this *TaskCreatedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskCreatedEvent)
	if !ok {
		that2, ok := that.(TaskCreatedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *TaskChangedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskChangedEvent)
	if !ok {
		that2, ok := that.(TaskChangedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Before.Equal(that1.Before) {
		return false
	}
	if !this.After.Equal(that1.After) {
		return false
	}
	return true
}
func (this *TaskRemovedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskRemovedEvent)
	if !ok {
		that2, ok := that.(TaskRemovedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *ActualLRPCreatedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.ActualLRPCreatedEvent{")
	if this.ActualLrpGroup != nil {
		s = append(s, "ActualLrpGroup: "+fmt.Sprintf("%#v", this.ActualLrpGroup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPChangedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ActualLRPChangedEvent{")
	if this.Before != nil {
		s = append(s, "Before: "+fmt.Sprintf("%#v", this.Before)+",\n")
	}
	if this.After != nil {
		s = append(s, "After: "+fmt.Sprintf("%#v", this.After)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPRemovedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.ActualLRPRemovedEvent{")
	if this.ActualLrpGroup != nil {
		s = append(s, "ActualLrpGroup: "+fmt.Sprintf("%#v", this.ActualLrpGroup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPCreatedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.DesiredLRPCreatedEvent{")
	if this.DesiredLrp != nil {
		s = append(s, "DesiredLrp: "+fmt.Sprintf("%#v", this.DesiredLrp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPChangedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPChangedEvent{")
	if this.Before != nil {
		s = append(s, "Before: "+fmt.Sprintf("%#v", this.Before)+",\n")
	}
	if this.After != nil {
		s = append(s, "After: "+fmt.Sprintf("%#v", this.After)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPRemovedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.DesiredLRPRemovedEvent{")
	if this.DesiredLrp != nil {
		s = append(s, "DesiredLrp: "+fmt.Sprintf("%#v", this.DesiredLrp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LRPDeploymentCreatedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.LRPDeploymentCreatedEvent{")
	if this.Lrp != nil {
		s = append(s, "Lrp: "+fmt.Sprintf("%#v", this.Lrp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LRPDeploymentChangedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.LRPDeploymentChangedEvent{")
	if this.Before != nil {
		s = append(s, "Before: "+fmt.Sprintf("%#v", this.Before)+",\n")
	}
	if this.After != nil {
		s = append(s, "After: "+fmt.Sprintf("%#v", this.After)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LRPDeploymentRemovedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.LRPDeploymentRemovedEvent{")
	if this.Lrp != nil {
		s = append(s, "Lrp: "+fmt.Sprintf("%#v", this.Lrp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActualLRPCrashedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&models.ActualLRPCrashedEvent{")
	s = append(s, "ActualLRPKey: "+strings.Replace(this.ActualLRPKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ActualLRPInstanceKey: "+strings.Replace(this.ActualLRPInstanceKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CrashCount: "+fmt.Sprintf("%#v", this.CrashCount)+",\n")
	s = append(s, "CrashReason: "+fmt.Sprintf("%#v", this.CrashReason)+",\n")
	s = append(s, "Since: "+fmt.Sprintf("%#v", this.Since)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventsByCellId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.EventsByCellId{")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskCreatedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.TaskCreatedEvent{")
	if this.Task != nil {
		s = append(s, "Task: "+fmt.Sprintf("%#v", this.Task)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskChangedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.TaskChangedEvent{")
	if this.Before != nil {
		s = append(s, "Before: "+fmt.Sprintf("%#v", this.Before)+",\n")
	}
	if this.After != nil {
		s = append(s, "After: "+fmt.Sprintf("%#v", this.After)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskRemovedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.TaskRemovedEvent{")
	if this.Task != nil {
		s = append(s, "Task: "+fmt.Sprintf("%#v", this.Task)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvents(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ActualLRPCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActualLrpGroup != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ActualLrpGroup.Size()))
		n1, err := m.ActualLrpGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ActualLRPChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Before != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Before.Size()))
		n2, err := m.Before.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.After != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.After.Size()))
		n3, err := m.After.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ActualLRPRemovedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPRemovedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActualLrpGroup != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ActualLrpGroup.Size()))
		n4, err := m.ActualLrpGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DesiredLRPCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DesiredLrp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.DesiredLrp.Size()))
		n5, err := m.DesiredLrp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *DesiredLRPChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Before != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Before.Size()))
		n6, err := m.Before.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.After != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.After.Size()))
		n7, err := m.After.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *DesiredLRPRemovedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPRemovedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DesiredLrp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.DesiredLrp.Size()))
		n8, err := m.DesiredLrp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *LRPDeploymentCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LRPDeploymentCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lrp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Lrp.Size()))
		n9, err := m.Lrp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *LRPDeploymentChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LRPDeploymentChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Before != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Before.Size()))
		n10, err := m.Before.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.After != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.After.Size()))
		n11, err := m.After.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *LRPDeploymentRemovedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LRPDeploymentRemovedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lrp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Lrp.Size()))
		n12, err := m.Lrp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ActualLRPCrashedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPCrashedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ActualLRPKey.Size()))
	n13, err := m.ActualLRPKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ActualLRPInstanceKey.Size()))
	n14, err := m.ActualLRPInstanceKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x18
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.CrashCount))
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(len(m.CrashReason)))
	i += copy(dAtA[i:], m.CrashReason)
	dAtA[i] = 0x28
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Since))
	return i, nil
}

func (m *EventsByCellId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsByCellId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(len(m.CellId)))
	i += copy(dAtA[i:], m.CellId)
	return i, nil
}

func (m *TaskCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Task.Size()))
		n15, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *TaskChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Before != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Before.Size()))
		n16, err := m.Before.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.After != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.After.Size()))
		n17, err := m.After.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *TaskRemovedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRemovedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Task.Size()))
		n18, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func encodeFixed64Events(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Events(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ActualLRPCreatedEvent) Size() (n int) {
	var l int
	_ = l
	if m.ActualLrpGroup != nil {
		l = m.ActualLrpGroup.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *ActualLRPChangedEvent) Size() (n int) {
	var l int
	_ = l
	if m.Before != nil {
		l = m.Before.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.After != nil {
		l = m.After.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *ActualLRPRemovedEvent) Size() (n int) {
	var l int
	_ = l
	if m.ActualLrpGroup != nil {
		l = m.ActualLrpGroup.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *DesiredLRPCreatedEvent) Size() (n int) {
	var l int
	_ = l
	if m.DesiredLrp != nil {
		l = m.DesiredLrp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *DesiredLRPChangedEvent) Size() (n int) {
	var l int
	_ = l
	if m.Before != nil {
		l = m.Before.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.After != nil {
		l = m.After.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *DesiredLRPRemovedEvent) Size() (n int) {
	var l int
	_ = l
	if m.DesiredLrp != nil {
		l = m.DesiredLrp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *LRPDeploymentCreatedEvent) Size() (n int) {
	var l int
	_ = l
	if m.Lrp != nil {
		l = m.Lrp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *LRPDeploymentChangedEvent) Size() (n int) {
	var l int
	_ = l
	if m.Before != nil {
		l = m.Before.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.After != nil {
		l = m.After.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *LRPDeploymentRemovedEvent) Size() (n int) {
	var l int
	_ = l
	if m.Lrp != nil {
		l = m.Lrp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *ActualLRPCrashedEvent) Size() (n int) {
	var l int
	_ = l
	l = m.ActualLRPKey.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ActualLRPInstanceKey.Size()
	n += 1 + l + sovEvents(uint64(l))
	n += 1 + sovEvents(uint64(m.CrashCount))
	l = len(m.CrashReason)
	n += 1 + l + sovEvents(uint64(l))
	n += 1 + sovEvents(uint64(m.Since))
	return n
}

func (m *EventsByCellId) Size() (n int) {
	var l int
	_ = l
	l = len(m.CellId)
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *TaskCreatedEvent) Size() (n int) {
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *TaskChangedEvent) Size() (n int) {
	var l int
	_ = l
	if m.Before != nil {
		l = m.Before.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.After != nil {
		l = m.After.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *TaskRemovedEvent) Size() (n int) {
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ActualLRPCreatedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPCreatedEvent{`,
		`ActualLrpGroup:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpGroup), "ActualLRPGroup", "ActualLRPGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPChangedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPChangedEvent{`,
		`Before:` + strings.Replace(fmt.Sprintf("%v", this.Before), "ActualLRPGroup", "ActualLRPGroup", 1) + `,`,
		`After:` + strings.Replace(fmt.Sprintf("%v", this.After), "ActualLRPGroup", "ActualLRPGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPRemovedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPRemovedEvent{`,
		`ActualLrpGroup:` + strings.Replace(fmt.Sprintf("%v", this.ActualLrpGroup), "ActualLRPGroup", "ActualLRPGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPCreatedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPCreatedEvent{`,
		`DesiredLrp:` + strings.Replace(fmt.Sprintf("%v", this.DesiredLrp), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPChangedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPChangedEvent{`,
		`Before:` + strings.Replace(fmt.Sprintf("%v", this.Before), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`After:` + strings.Replace(fmt.Sprintf("%v", this.After), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPRemovedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPRemovedEvent{`,
		`DesiredLrp:` + strings.Replace(fmt.Sprintf("%v", this.DesiredLrp), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LRPDeploymentCreatedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LRPDeploymentCreatedEvent{`,
		`Lrp:` + strings.Replace(fmt.Sprintf("%v", this.Lrp), "LRPDeployment", "LRPDeployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LRPDeploymentChangedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LRPDeploymentChangedEvent{`,
		`Before:` + strings.Replace(fmt.Sprintf("%v", this.Before), "LRPDeployment", "LRPDeployment", 1) + `,`,
		`After:` + strings.Replace(fmt.Sprintf("%v", this.After), "LRPDeployment", "LRPDeployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LRPDeploymentRemovedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LRPDeploymentRemovedEvent{`,
		`Lrp:` + strings.Replace(fmt.Sprintf("%v", this.Lrp), "LRPDeployment", "LRPDeployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActualLRPCrashedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPCrashedEvent{`,
		`ActualLRPKey:` + strings.Replace(strings.Replace(this.ActualLRPKey.String(), "ActualLRPKey", "ActualLRPKey", 1), `&`, ``, 1) + `,`,
		`ActualLRPInstanceKey:` + strings.Replace(strings.Replace(this.ActualLRPInstanceKey.String(), "ActualLRPInstanceKey", "ActualLRPInstanceKey", 1), `&`, ``, 1) + `,`,
		`CrashCount:` + fmt.Sprintf("%v", this.CrashCount) + `,`,
		`CrashReason:` + fmt.Sprintf("%v", this.CrashReason) + `,`,
		`Since:` + fmt.Sprintf("%v", this.Since) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventsByCellId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventsByCellId{`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskCreatedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskCreatedEvent{`,
		`Task:` + strings.Replace(fmt.Sprintf("%v", this.Task), "Task", "Task", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskChangedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskChangedEvent{`,
		`Before:` + strings.Replace(fmt.Sprintf("%v", this.Before), "Task", "Task", 1) + `,`,
		`After:` + strings.Replace(fmt.Sprintf("%v", this.After), "Task", "Task", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskRemovedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskRemovedEvent{`,
		`Task:` + strings.Replace(fmt.Sprintf("%v", this.Task), "Task", "Task", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvents(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ActualLRPCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpGroup == nil {
				m.ActualLrpGroup = &ActualLRPGroup{}
			}
			if err := m.ActualLrpGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Before == nil {
				m.Before = &ActualLRPGroup{}
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = &ActualLRPGroup{}
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPRemovedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPRemovedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPRemovedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActualLrpGroup == nil {
				m.ActualLrpGroup = &ActualLRPGroup{}
			}
			if err := m.ActualLrpGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredLrp == nil {
				m.DesiredLrp = &DesiredLRP{}
			}
			if err := m.DesiredLrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Before == nil {
				m.Before = &DesiredLRP{}
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = &DesiredLRP{}
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPRemovedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPRemovedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPRemovedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredLrp == nil {
				m.DesiredLrp = &DesiredLRP{}
			}
			if err := m.DesiredLrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LRPDeploymentCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LRPDeploymentCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LRPDeploymentCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lrp == nil {
				m.Lrp = &LRPDeployment{}
			}
			if err := m.Lrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LRPDeploymentChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LRPDeploymentChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LRPDeploymentChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Before == nil {
				m.Before = &LRPDeployment{}
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = &LRPDeployment{}
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LRPDeploymentRemovedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LRPDeploymentRemovedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LRPDeploymentRemovedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lrp == nil {
				m.Lrp = &LRPDeployment{}
			}
			if err := m.Lrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActualLRPCrashedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPCrashedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPCrashedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPInstanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashCount", wireType)
			}
			m.CrashCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrashCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrashReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Since |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsByCellId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsByCellId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsByCellId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Before == nil {
				m.Before = &Task{}
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = &Task{}
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRemovedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRemovedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRemovedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptorEvents) }

var fileDescriptorEvents = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x3d, 0x6d, 0x53, 0xd4, 0x49, 0x14, 0x15, 0x2b, 0x0d, 0x21, 0x82, 0x49, 0x64, 0x81,
	0x88, 0x20, 0x4d, 0x24, 0xe0, 0x00, 0x34, 0x09, 0x82, 0xaa, 0x41, 0xaa, 0x2c, 0x36, 0x48, 0x48,
	0x91, 0x63, 0x4f, 0x12, 0x2b, 0xb6, 0xc7, 0xb2, 0xc7, 0x45, 0xde, 0x71, 0x04, 0x8e, 0xc1, 0x51,
	0x2a, 0x56, 0x59, 0xb2, 0x8a, 0x88, 0xd9, 0xa0, 0xae, 0x7a, 0x04, 0xe4, 0xf1, 0x38, 0xf5, 0x38,
	0x2d, 0x45, 0x88, 0x9d, 0xe7, 0xbd, 0xff, 0xfd, 0xf3, 0xe6, 0xd3, 0x9f, 0xc0, 0x12, 0x3e, 0xc3,
	0x0e, 0xf5, 0x3b, 0xae, 0x47, 0x28, 0x91, 0x77, 0x6d, 0x62, 0x60, 0xcb, 0xaf, 0x1f, 0x4e, 0x4d,
	0x3a, 0x0b, 0xc6, 0x1d, 0x9d, 0xd8, 0xdd, 0x29, 0x99, 0x92, 0x2e, 0x6b, 0x8f, 0x83, 0x09, 0x3b,
	0xb1, 0x03, 0xfb, 0x4a, 0xc6, 0xea, 0xfb, 0x9a, 0x4e, 0x03, 0xcd, 0x1a, 0x59, 0x9e, 0xcb, 0x2b,
	0x77, 0x0d, 0xec, 0x9b, 0x1e, 0x36, 0x32, 0xa5, 0x8a, 0xe5, 0xb9, 0x23, 0x03, 0xbb, 0x16, 0x09,
	0x6d, 0xec, 0x50, 0x5e, 0x85, 0x54, 0xf3, 0xe7, 0xc9, 0xb7, 0xf2, 0x01, 0x1e, 0x1c, 0x31, 0xa3,
	0xa1, 0x7a, 0xda, 0xf7, 0xb0, 0x46, 0xb1, 0xf1, 0x3a, 0xde, 0x4e, 0x7e, 0x05, 0x33, 0x37, 0x8c,
	0xa6, 0x1e, 0x09, 0xdc, 0x1a, 0x68, 0x82, 0x56, 0xf1, 0x79, 0xb5, 0x93, 0x6c, 0xdc, 0x59, 0x0f,
	0xbe, 0x89, 0xbb, 0x6a, 0x39, 0xd1, 0x0f, 0x3d, 0x97, 0x9d, 0x95, 0x20, 0x6b, 0x3d, 0xd3, 0x9c,
	0x69, 0x6a, 0xdd, 0x81, 0xbb, 0x63, 0x3c, 0x21, 0x1e, 0xbe, 0xc5, 0x90, 0xab, 0xe4, 0x36, 0x2c,
	0x68, 0x13, 0x8a, 0xbd, 0xda, 0xd6, 0x1f, 0xe5, 0x89, 0x48, 0x78, 0x91, 0x8a, 0x6d, 0x72, 0xf6,
	0xff, 0x5e, 0xf4, 0x0e, 0x56, 0x07, 0x09, 0xe3, 0x3c, 0xad, 0x17, 0xb0, 0x98, 0xa1, 0xcf, 0x6d,
	0xe5, 0xd4, 0xf6, 0x6a, 0x48, 0x85, 0x5c, 0x36, 0xf4, 0x5c, 0xc5, 0x11, 0xec, 0xb2, 0x84, 0x9e,
	0xe6, 0x08, 0x5d, 0xe7, 0x94, 0xd2, 0x69, 0x89, 0x74, 0xae, 0x93, 0x72, 0x32, 0xc2, 0xfa, 0x02,
	0x9a, 0x7f, 0x5a, 0x7f, 0x00, 0xef, 0x0f, 0xd5, 0xd3, 0xc1, 0x3a, 0x5d, 0x02, 0x90, 0x27, 0x70,
	0xfb, 0xca, 0xe9, 0x20, 0x75, 0x12, 0xf4, 0x6a, 0xac, 0x50, 0x3e, 0xe5, 0x5d, 0xb2, 0x1c, 0x0e,
	0x73, 0x1c, 0x6e, 0x30, 0x4a, 0x51, 0x3c, 0x13, 0x51, 0xdc, 0xa0, 0xe6, 0x34, 0xf2, 0xeb, 0x0b,
	0x40, 0xfe, 0x7a, 0xfd, 0x6f, 0x5b, 0xc2, 0x0f, 0x48, 0xf3, 0x67, 0xa9, 0xc5, 0x5b, 0x58, 0xce,
	0xc4, 0x6d, 0x8e, 0x43, 0xee, 0x56, 0xd9, 0x08, 0xdb, 0x09, 0x0e, 0x7b, 0xa5, 0xf3, 0x65, 0x43,
	0x5a, 0x2c, 0x1b, 0xe0, 0x62, 0xd9, 0x90, 0xd4, 0xd2, 0x3a, 0x78, 0x27, 0x38, 0x94, 0x35, 0x78,
	0x2f, 0xe3, 0x64, 0x3a, 0x3e, 0xd5, 0x1c, 0x1d, 0x33, 0xcb, 0xe4, 0xa1, 0x0f, 0x36, 0x2c, 0x8f,
	0xb9, 0x68, 0xd3, 0xba, 0xb2, 0xb6, 0xce, 0x68, 0xe4, 0xc7, 0xb0, 0xa8, 0xc7, 0xcb, 0x8f, 0x74,
	0x12, 0x38, 0xb4, 0xb6, 0xdd, 0x04, 0xad, 0x42, 0x6f, 0x27, 0x1e, 0x54, 0x21, 0x6b, 0xf4, 0xe3,
	0xba, 0x7c, 0x04, 0x4b, 0x89, 0xcc, 0xc3, 0x9a, 0x4f, 0x9c, 0xda, 0x4e, 0x13, 0xb4, 0xf6, 0x7a,
	0x28, 0xd6, 0x5d, 0x2c, 0x1b, 0xd5, 0x6c, 0xaf, 0x4d, 0x6c, 0x93, 0x62, 0xdb, 0xa5, 0xa1, 0x9a,
	0x58, 0xab, 0xac, 0x2c, 0xd7, 0x61, 0xc1, 0x37, 0x1d, 0x1d, 0xd7, 0x0a, 0x4d, 0xd0, 0xda, 0xe6,
	0x77, 0x24, 0x25, 0xa5, 0x0b, 0xcb, 0x8c, 0x9d, 0xdf, 0x0b, 0xfb, 0xd8, 0xb2, 0x8e, 0x0d, 0xf9,
	0x21, 0xbc, 0xa3, 0x63, 0xcb, 0x1a, 0x99, 0x06, 0xa3, 0xb7, 0xc7, 0xf5, 0xbb, 0x3a, 0x6b, 0x2b,
	0x2f, 0xe1, 0xfe, 0x7b, 0xcd, 0x9f, 0x0b, 0xc9, 0x6b, 0xc2, 0x9d, 0xf8, 0xff, 0x8d, 0xd3, 0x2e,
	0xa5, 0x68, 0x62, 0x9d, 0xca, 0x3a, 0xca, 0x47, 0x3e, 0x95, 0x4d, 0xda, 0xa3, 0x5c, 0xd2, 0xc4,
	0xb9, 0x34, 0x60, 0x8a, 0x18, 0x30, 0x51, 0xc4, 0x73, 0xc5, 0x77, 0x12, 0xe2, 0x74, 0xeb, 0x4e,
	0xbd, 0xf6, 0x62, 0x85, 0xa4, 0xef, 0x2b, 0x24, 0x5d, 0xae, 0x10, 0xf8, 0x1c, 0x21, 0xf0, 0x35,
	0x42, 0xe0, 0x3c, 0x42, 0x60, 0x11, 0x21, 0xf0, 0x23, 0x42, 0xe0, 0x57, 0x84, 0xa4, 0xcb, 0x08,
	0x81, 0x2f, 0x3f, 0x91, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x7e, 0x5e, 0x92, 0x42, 0x06,
	0x00, 0x00,
}
