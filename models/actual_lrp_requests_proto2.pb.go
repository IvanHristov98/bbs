// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actual_lrp_requests_proto2.proto

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ActualLRPsRequestProto2 struct {
	Domain      string `protobuf:"bytes,1,opt,name=domain" json:"domain"`
	CellId      string `protobuf:"bytes,2,opt,name=cell_id,json=cellId" json:"cell_id"`
	ProcessGuid string `protobuf:"bytes,3,opt,name=process_guid,json=processGuid" json:"process_guid"`
	Index       *int32 `protobuf:"varint,4,opt,name=index" json:"index"`
}

func (m *ActualLRPsRequestProto2) Reset()      { *m = ActualLRPsRequestProto2{} }
func (*ActualLRPsRequestProto2) ProtoMessage() {}
func (*ActualLRPsRequestProto2) Descriptor() ([]byte, []int) {
	return fileDescriptor_actual_lrp_requests_proto2_70c82c6d8c1f9f22, []int{0}
}
func (m *ActualLRPsRequestProto2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActualLRPsRequestProto2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActualLRPsRequestProto2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActualLRPsRequestProto2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualLRPsRequestProto2.Merge(dst, src)
}
func (m *ActualLRPsRequestProto2) XXX_Size() int {
	return m.Size()
}
func (m *ActualLRPsRequestProto2) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualLRPsRequestProto2.DiscardUnknown(m)
}

var xxx_messageInfo_ActualLRPsRequestProto2 proto.InternalMessageInfo

func (m *ActualLRPsRequestProto2) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ActualLRPsRequestProto2) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

func (m *ActualLRPsRequestProto2) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

func (m *ActualLRPsRequestProto2) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*ActualLRPsRequestProto2)(nil), "models.ActualLRPsRequestProto2")
}
func (this *ActualLRPsRequestProto2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActualLRPsRequestProto2)
	if !ok {
		that2, ok := that.(ActualLRPsRequestProto2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	if this.Index != nil && that1.Index != nil {
		if *this.Index != *that1.Index {
			return false
		}
	} else if this.Index != nil {
		return false
	} else if that1.Index != nil {
		return false
	}
	return true
}
func (this *ActualLRPsRequestProto2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.ActualLRPsRequestProto2{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	if this.Index != nil {
		s = append(s, "Index: "+valueToGoStringActualLrpRequestsProto2(this.Index, "int32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActualLrpRequestsProto2(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ActualLRPsRequestProto2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActualLRPsRequestProto2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintActualLrpRequestsProto2(dAtA, i, uint64(len(m.Domain)))
	i += copy(dAtA[i:], m.Domain)
	dAtA[i] = 0x12
	i++
	i = encodeVarintActualLrpRequestsProto2(dAtA, i, uint64(len(m.CellId)))
	i += copy(dAtA[i:], m.CellId)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintActualLrpRequestsProto2(dAtA, i, uint64(len(m.ProcessGuid)))
	i += copy(dAtA[i:], m.ProcessGuid)
	if m.Index != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActualLrpRequestsProto2(dAtA, i, uint64(*m.Index))
	}
	return i, nil
}

func encodeVarintActualLrpRequestsProto2(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ActualLRPsRequestProto2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	n += 1 + l + sovActualLrpRequestsProto2(uint64(l))
	l = len(m.CellId)
	n += 1 + l + sovActualLrpRequestsProto2(uint64(l))
	l = len(m.ProcessGuid)
	n += 1 + l + sovActualLrpRequestsProto2(uint64(l))
	if m.Index != nil {
		n += 1 + sovActualLrpRequestsProto2(uint64(*m.Index))
	}
	return n
}

func sovActualLrpRequestsProto2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActualLrpRequestsProto2(x uint64) (n int) {
	return sovActualLrpRequestsProto2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ActualLRPsRequestProto2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActualLRPsRequestProto2{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`Index:` + valueToStringActualLrpRequestsProto2(this.Index) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActualLrpRequestsProto2(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ActualLRPsRequestProto2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActualLrpRequestsProto2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActualLRPsRequestProto2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActualLRPsRequestProto2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrpRequestsProto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrpRequestsProto2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrpRequestsProto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrpRequestsProto2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrpRequestsProto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActualLrpRequestsProto2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActualLrpRequestsProto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		default:
			iNdEx = preIndex
			skippy, err := skipActualLrpRequestsProto2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActualLrpRequestsProto2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActualLrpRequestsProto2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActualLrpRequestsProto2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActualLrpRequestsProto2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActualLrpRequestsProto2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActualLrpRequestsProto2
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActualLrpRequestsProto2
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActualLrpRequestsProto2(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActualLrpRequestsProto2 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActualLrpRequestsProto2   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("actual_lrp_requests_proto2.proto", fileDescriptor_actual_lrp_requests_proto2_70c82c6d8c1f9f22)
}

var fileDescriptor_actual_lrp_requests_proto2_70c82c6d8c1f9f22 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8c, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0xe7, 0xaa, 0xad, 0x38, 0xfe, 0x41, 0x10, 0x0c, 0x2e, 0x6e, 0x8a, 0x82, 0x74, 0x63,
	0x0b, 0x22, 0xb8, 0xb6, 0x1b, 0x11, 0x5c, 0x94, 0x79, 0x81, 0xd0, 0x66, 0xc6, 0x38, 0x90, 0x76,
	0x62, 0x26, 0x03, 0x2e, 0x7d, 0x04, 0x1f, 0xc3, 0x47, 0x89, 0xbb, 0x2c, 0xbb, 0x0a, 0x66, 0xb2,
	0x91, 0xae, 0xfa, 0x08, 0xe2, 0x24, 0x2e, 0x5c, 0x9d, 0x7b, 0xce, 0xf9, 0xee, 0xa1, 0x83, 0x59,
	0x94, 0x9b, 0x59, 0x12, 0x26, 0x59, 0x1a, 0x66, 0xe2, 0xc5, 0x08, 0x9d, 0xeb, 0x30, 0xcd, 0x54,
	0xae, 0xae, 0x47, 0x4e, 0xbc, 0xfe, 0x42, 0x71, 0x91, 0xe8, 0xb3, 0xab, 0x58, 0xe6, 0xcf, 0x66,
	0x3e, 0x8a, 0xd4, 0x62, 0x1c, 0xab, 0x58, 0x8d, 0x5d, 0x3d, 0x37, 0x4f, 0xce, 0x39, 0xe3, 0xae,
	0xf6, 0xed, 0xfc, 0x13, 0xe8, 0xe9, 0x9d, 0xdb, 0x7e, 0x64, 0x53, 0xcd, 0xda, 0xe9, 0xa9, 0x1b,
	0xf6, 0x2e, 0x69, 0x9f, 0xab, 0xc5, 0x4c, 0x2e, 0x7d, 0x18, 0xc0, 0x70, 0x6f, 0x72, 0x54, 0x54,
	0x01, 0x59, 0x57, 0x41, 0x97, 0xb2, 0x4e, 0xbd, 0x21, 0xdd, 0x8d, 0x44, 0x92, 0x84, 0x92, 0xfb,
	0x5b, 0x0e, 0x3c, 0xee, 0xc0, 0xbf, 0x98, 0xf5, 0x7f, 0x8f, 0x07, 0xee, 0xdd, 0xd2, 0x83, 0x34,
	0x53, 0x91, 0xd0, 0x3a, 0x8c, 0x8d, 0xe4, 0xfe, 0xb6, 0xc3, 0x4f, 0x3a, 0xfc, 0x5f, 0xc7, 0xf6,
	0x3b, 0x77, 0x6f, 0x24, 0xf7, 0x2e, 0x68, 0x4f, 0x2e, 0xb9, 0x78, 0xf5, 0x77, 0x06, 0x30, 0xec,
	0x4d, 0x0e, 0x8b, 0x2a, 0x80, 0x75, 0x15, 0xb4, 0x21, 0x6b, 0x65, 0x72, 0x53, 0xd6, 0x48, 0x56,
	0x35, 0x92, 0x4d, 0x8d, 0xf0, 0x66, 0x11, 0x3e, 0x2c, 0x42, 0x61, 0x11, 0x4a, 0x8b, 0xf0, 0x65,
	0x11, 0xbe, 0x2d, 0x92, 0x8d, 0x45, 0x78, 0x6f, 0x90, 0x94, 0x0d, 0x92, 0x55, 0x83, 0xe4, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x88, 0x5e, 0x25, 0xcc, 0x5b, 0x01, 0x00, 0x00,
}
