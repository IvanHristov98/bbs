// This file was generated by counterfeiter
package fake_controllers

import (
	"sync"

	"code.cloudfoundry.org/bbs/converger"
	"code.cloudfoundry.org/lager"
)

type FakeLrpConvergenceController struct {
	ConvergeLRPsStub        func(logger lager.Logger) error
	convergeLRPsMutex       sync.RWMutex
	convergeLRPsArgsForCall []struct {
		logger lager.Logger
	}
	convergeLRPsReturns struct {
		result1 error
	}
}

func (fake *FakeLrpConvergenceController) ConvergeLRPs(logger lager.Logger) error {
	fake.convergeLRPsMutex.Lock()
	fake.convergeLRPsArgsForCall = append(fake.convergeLRPsArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.convergeLRPsMutex.Unlock()
	if fake.ConvergeLRPsStub != nil {
		return fake.ConvergeLRPsStub(logger)
	} else {
		return fake.convergeLRPsReturns.result1
	}
}

func (fake *FakeLrpConvergenceController) ConvergeLRPsCallCount() int {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return len(fake.convergeLRPsArgsForCall)
}

func (fake *FakeLrpConvergenceController) ConvergeLRPsArgsForCall(i int) lager.Logger {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return fake.convergeLRPsArgsForCall[i].logger
}

func (fake *FakeLrpConvergenceController) ConvergeLRPsReturns(result1 error) {
	fake.ConvergeLRPsStub = nil
	fake.convergeLRPsReturns = struct {
		result1 error
	}{result1}
}

var _ converger.LrpConvergenceController = new(FakeLrpConvergenceController)
