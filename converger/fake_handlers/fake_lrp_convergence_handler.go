// This file was generated by counterfeiter
package fake_handlers

import (
	"sync"

	"code.cloudfoundry.org/bbs/converger"
)

type FakeLrpConvergenceHandler struct {
	ConvergeLRPsStub        func() error
	convergeLRPsMutex       sync.RWMutex
	convergeLRPsArgsForCall []struct{}
	convergeLRPsReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLrpConvergenceHandler) ConvergeLRPs() error {
	fake.convergeLRPsMutex.Lock()
	fake.convergeLRPsArgsForCall = append(fake.convergeLRPsArgsForCall, struct{}{})
	fake.recordInvocation("ConvergeLRPs", []interface{}{})
	fake.convergeLRPsMutex.Unlock()
	if fake.ConvergeLRPsStub != nil {
		return fake.ConvergeLRPsStub()
	} else {
		return fake.convergeLRPsReturns.result1
	}
}

func (fake *FakeLrpConvergenceHandler) ConvergeLRPsCallCount() int {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return len(fake.convergeLRPsArgsForCall)
}

func (fake *FakeLrpConvergenceHandler) ConvergeLRPsReturns(result1 error) {
	fake.ConvergeLRPsStub = nil
	fake.convergeLRPsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLrpConvergenceHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLrpConvergenceHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ converger.LrpConvergenceHandler = new(FakeLrpConvergenceHandler)
