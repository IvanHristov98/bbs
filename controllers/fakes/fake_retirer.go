// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/controllers"
	"code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/lager"
)

type FakeRetirer struct {
	RetireActualLRPStub        func(logger lager.Logger, key *models.ActualLRPKey) error
	retireActualLRPMutex       sync.RWMutex
	retireActualLRPArgsForCall []struct {
		logger lager.Logger
		key    *models.ActualLRPKey
	}
	retireActualLRPReturns struct {
		result1 error
	}
	retireActualLRPReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSuspectActualLRPStub        func(logger lager.Logger, key *models.ActualLRPKey) error
	removeSuspectActualLRPMutex       sync.RWMutex
	removeSuspectActualLRPArgsForCall []struct {
		logger lager.Logger
		key    *models.ActualLRPKey
	}
	removeSuspectActualLRPReturns struct {
		result1 error
	}
	removeSuspectActualLRPReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRetirer) RetireActualLRP(logger lager.Logger, key *models.ActualLRPKey) error {
	fake.retireActualLRPMutex.Lock()
	ret, specificReturn := fake.retireActualLRPReturnsOnCall[len(fake.retireActualLRPArgsForCall)]
	fake.retireActualLRPArgsForCall = append(fake.retireActualLRPArgsForCall, struct {
		logger lager.Logger
		key    *models.ActualLRPKey
	}{logger, key})
	fake.recordInvocation("RetireActualLRP", []interface{}{logger, key})
	fake.retireActualLRPMutex.Unlock()
	if fake.RetireActualLRPStub != nil {
		return fake.RetireActualLRPStub(logger, key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.retireActualLRPReturns.result1
}

func (fake *FakeRetirer) RetireActualLRPCallCount() int {
	fake.retireActualLRPMutex.RLock()
	defer fake.retireActualLRPMutex.RUnlock()
	return len(fake.retireActualLRPArgsForCall)
}

func (fake *FakeRetirer) RetireActualLRPArgsForCall(i int) (lager.Logger, *models.ActualLRPKey) {
	fake.retireActualLRPMutex.RLock()
	defer fake.retireActualLRPMutex.RUnlock()
	return fake.retireActualLRPArgsForCall[i].logger, fake.retireActualLRPArgsForCall[i].key
}

func (fake *FakeRetirer) RetireActualLRPReturns(result1 error) {
	fake.RetireActualLRPStub = nil
	fake.retireActualLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRetirer) RetireActualLRPReturnsOnCall(i int, result1 error) {
	fake.RetireActualLRPStub = nil
	if fake.retireActualLRPReturnsOnCall == nil {
		fake.retireActualLRPReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.retireActualLRPReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRetirer) RemoveSuspectActualLRP(logger lager.Logger, key *models.ActualLRPKey) error {
	fake.removeSuspectActualLRPMutex.Lock()
	ret, specificReturn := fake.removeSuspectActualLRPReturnsOnCall[len(fake.removeSuspectActualLRPArgsForCall)]
	fake.removeSuspectActualLRPArgsForCall = append(fake.removeSuspectActualLRPArgsForCall, struct {
		logger lager.Logger
		key    *models.ActualLRPKey
	}{logger, key})
	fake.recordInvocation("RemoveSuspectActualLRP", []interface{}{logger, key})
	fake.removeSuspectActualLRPMutex.Unlock()
	if fake.RemoveSuspectActualLRPStub != nil {
		return fake.RemoveSuspectActualLRPStub(logger, key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeSuspectActualLRPReturns.result1
}

func (fake *FakeRetirer) RemoveSuspectActualLRPCallCount() int {
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	return len(fake.removeSuspectActualLRPArgsForCall)
}

func (fake *FakeRetirer) RemoveSuspectActualLRPArgsForCall(i int) (lager.Logger, *models.ActualLRPKey) {
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	return fake.removeSuspectActualLRPArgsForCall[i].logger, fake.removeSuspectActualLRPArgsForCall[i].key
}

func (fake *FakeRetirer) RemoveSuspectActualLRPReturns(result1 error) {
	fake.RemoveSuspectActualLRPStub = nil
	fake.removeSuspectActualLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRetirer) RemoveSuspectActualLRPReturnsOnCall(i int, result1 error) {
	fake.RemoveSuspectActualLRPStub = nil
	if fake.removeSuspectActualLRPReturnsOnCall == nil {
		fake.removeSuspectActualLRPReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSuspectActualLRPReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRetirer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.retireActualLRPMutex.RLock()
	defer fake.retireActualLRPMutex.RUnlock()
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRetirer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.Retirer = new(FakeRetirer)
