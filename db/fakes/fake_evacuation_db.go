// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bbs/db"
	"github.com/cloudfoundry-incubator/bbs/models"
	"github.com/pivotal-golang/lager"
)

type FakeEvacuationDB struct {
	EvacuateClaimedActualLRPStub        func(lager.Logger, *models.EvacuateClaimedActualLRPRequest) (bool, *models.Error)
	evacuateClaimedActualLRPMutex       sync.RWMutex
	evacuateClaimedActualLRPArgsForCall []struct {
		arg1 lager.Logger
		arg2 *models.EvacuateClaimedActualLRPRequest
	}
	evacuateClaimedActualLRPReturns struct {
		result1 bool
		result2 *models.Error
	}
	EvacuateRunningActualLRPStub        func(lager.Logger, *models.EvacuateRunningActualLRPRequest) (bool, *models.Error)
	evacuateRunningActualLRPMutex       sync.RWMutex
	evacuateRunningActualLRPArgsForCall []struct {
		arg1 lager.Logger
		arg2 *models.EvacuateRunningActualLRPRequest
	}
	evacuateRunningActualLRPReturns struct {
		result1 bool
		result2 *models.Error
	}
	EvacuateStoppedActualLRPStub        func(lager.Logger, *models.EvacuateStoppedActualLRPRequest) (bool, *models.Error)
	evacuateStoppedActualLRPMutex       sync.RWMutex
	evacuateStoppedActualLRPArgsForCall []struct {
		arg1 lager.Logger
		arg2 *models.EvacuateStoppedActualLRPRequest
	}
	evacuateStoppedActualLRPReturns struct {
		result1 bool
		result2 *models.Error
	}
	EvacuateCrashedActualLRPStub        func(lager.Logger, *models.EvacuateCrashedActualLRPRequest) (bool, *models.Error)
	evacuateCrashedActualLRPMutex       sync.RWMutex
	evacuateCrashedActualLRPArgsForCall []struct {
		arg1 lager.Logger
		arg2 *models.EvacuateCrashedActualLRPRequest
	}
	evacuateCrashedActualLRPReturns struct {
		result1 bool
		result2 *models.Error
	}
	RemoveEvacuatingActualLRPStub        func(lager.Logger, *models.RemoveEvacuatingActualLRPRequest) *models.Error
	removeEvacuatingActualLRPMutex       sync.RWMutex
	removeEvacuatingActualLRPArgsForCall []struct {
		arg1 lager.Logger
		arg2 *models.RemoveEvacuatingActualLRPRequest
	}
	removeEvacuatingActualLRPReturns struct {
		result1 *models.Error
	}
}

func (fake *FakeEvacuationDB) EvacuateClaimedActualLRP(arg1 lager.Logger, arg2 *models.EvacuateClaimedActualLRPRequest) (bool, *models.Error) {
	fake.evacuateClaimedActualLRPMutex.Lock()
	fake.evacuateClaimedActualLRPArgsForCall = append(fake.evacuateClaimedActualLRPArgsForCall, struct {
		arg1 lager.Logger
		arg2 *models.EvacuateClaimedActualLRPRequest
	}{arg1, arg2})
	fake.evacuateClaimedActualLRPMutex.Unlock()
	if fake.EvacuateClaimedActualLRPStub != nil {
		return fake.EvacuateClaimedActualLRPStub(arg1, arg2)
	} else {
		return fake.evacuateClaimedActualLRPReturns.result1, fake.evacuateClaimedActualLRPReturns.result2
	}
}

func (fake *FakeEvacuationDB) EvacuateClaimedActualLRPCallCount() int {
	fake.evacuateClaimedActualLRPMutex.RLock()
	defer fake.evacuateClaimedActualLRPMutex.RUnlock()
	return len(fake.evacuateClaimedActualLRPArgsForCall)
}

func (fake *FakeEvacuationDB) EvacuateClaimedActualLRPArgsForCall(i int) (lager.Logger, *models.EvacuateClaimedActualLRPRequest) {
	fake.evacuateClaimedActualLRPMutex.RLock()
	defer fake.evacuateClaimedActualLRPMutex.RUnlock()
	return fake.evacuateClaimedActualLRPArgsForCall[i].arg1, fake.evacuateClaimedActualLRPArgsForCall[i].arg2
}

func (fake *FakeEvacuationDB) EvacuateClaimedActualLRPReturns(result1 bool, result2 *models.Error) {
	fake.EvacuateClaimedActualLRPStub = nil
	fake.evacuateClaimedActualLRPReturns = struct {
		result1 bool
		result2 *models.Error
	}{result1, result2}
}

func (fake *FakeEvacuationDB) EvacuateRunningActualLRP(arg1 lager.Logger, arg2 *models.EvacuateRunningActualLRPRequest) (bool, *models.Error) {
	fake.evacuateRunningActualLRPMutex.Lock()
	fake.evacuateRunningActualLRPArgsForCall = append(fake.evacuateRunningActualLRPArgsForCall, struct {
		arg1 lager.Logger
		arg2 *models.EvacuateRunningActualLRPRequest
	}{arg1, arg2})
	fake.evacuateRunningActualLRPMutex.Unlock()
	if fake.EvacuateRunningActualLRPStub != nil {
		return fake.EvacuateRunningActualLRPStub(arg1, arg2)
	} else {
		return fake.evacuateRunningActualLRPReturns.result1, fake.evacuateRunningActualLRPReturns.result2
	}
}

func (fake *FakeEvacuationDB) EvacuateRunningActualLRPCallCount() int {
	fake.evacuateRunningActualLRPMutex.RLock()
	defer fake.evacuateRunningActualLRPMutex.RUnlock()
	return len(fake.evacuateRunningActualLRPArgsForCall)
}

func (fake *FakeEvacuationDB) EvacuateRunningActualLRPArgsForCall(i int) (lager.Logger, *models.EvacuateRunningActualLRPRequest) {
	fake.evacuateRunningActualLRPMutex.RLock()
	defer fake.evacuateRunningActualLRPMutex.RUnlock()
	return fake.evacuateRunningActualLRPArgsForCall[i].arg1, fake.evacuateRunningActualLRPArgsForCall[i].arg2
}

func (fake *FakeEvacuationDB) EvacuateRunningActualLRPReturns(result1 bool, result2 *models.Error) {
	fake.EvacuateRunningActualLRPStub = nil
	fake.evacuateRunningActualLRPReturns = struct {
		result1 bool
		result2 *models.Error
	}{result1, result2}
}

func (fake *FakeEvacuationDB) EvacuateStoppedActualLRP(arg1 lager.Logger, arg2 *models.EvacuateStoppedActualLRPRequest) (bool, *models.Error) {
	fake.evacuateStoppedActualLRPMutex.Lock()
	fake.evacuateStoppedActualLRPArgsForCall = append(fake.evacuateStoppedActualLRPArgsForCall, struct {
		arg1 lager.Logger
		arg2 *models.EvacuateStoppedActualLRPRequest
	}{arg1, arg2})
	fake.evacuateStoppedActualLRPMutex.Unlock()
	if fake.EvacuateStoppedActualLRPStub != nil {
		return fake.EvacuateStoppedActualLRPStub(arg1, arg2)
	} else {
		return fake.evacuateStoppedActualLRPReturns.result1, fake.evacuateStoppedActualLRPReturns.result2
	}
}

func (fake *FakeEvacuationDB) EvacuateStoppedActualLRPCallCount() int {
	fake.evacuateStoppedActualLRPMutex.RLock()
	defer fake.evacuateStoppedActualLRPMutex.RUnlock()
	return len(fake.evacuateStoppedActualLRPArgsForCall)
}

func (fake *FakeEvacuationDB) EvacuateStoppedActualLRPArgsForCall(i int) (lager.Logger, *models.EvacuateStoppedActualLRPRequest) {
	fake.evacuateStoppedActualLRPMutex.RLock()
	defer fake.evacuateStoppedActualLRPMutex.RUnlock()
	return fake.evacuateStoppedActualLRPArgsForCall[i].arg1, fake.evacuateStoppedActualLRPArgsForCall[i].arg2
}

func (fake *FakeEvacuationDB) EvacuateStoppedActualLRPReturns(result1 bool, result2 *models.Error) {
	fake.EvacuateStoppedActualLRPStub = nil
	fake.evacuateStoppedActualLRPReturns = struct {
		result1 bool
		result2 *models.Error
	}{result1, result2}
}

func (fake *FakeEvacuationDB) EvacuateCrashedActualLRP(arg1 lager.Logger, arg2 *models.EvacuateCrashedActualLRPRequest) (bool, *models.Error) {
	fake.evacuateCrashedActualLRPMutex.Lock()
	fake.evacuateCrashedActualLRPArgsForCall = append(fake.evacuateCrashedActualLRPArgsForCall, struct {
		arg1 lager.Logger
		arg2 *models.EvacuateCrashedActualLRPRequest
	}{arg1, arg2})
	fake.evacuateCrashedActualLRPMutex.Unlock()
	if fake.EvacuateCrashedActualLRPStub != nil {
		return fake.EvacuateCrashedActualLRPStub(arg1, arg2)
	} else {
		return fake.evacuateCrashedActualLRPReturns.result1, fake.evacuateCrashedActualLRPReturns.result2
	}
}

func (fake *FakeEvacuationDB) EvacuateCrashedActualLRPCallCount() int {
	fake.evacuateCrashedActualLRPMutex.RLock()
	defer fake.evacuateCrashedActualLRPMutex.RUnlock()
	return len(fake.evacuateCrashedActualLRPArgsForCall)
}

func (fake *FakeEvacuationDB) EvacuateCrashedActualLRPArgsForCall(i int) (lager.Logger, *models.EvacuateCrashedActualLRPRequest) {
	fake.evacuateCrashedActualLRPMutex.RLock()
	defer fake.evacuateCrashedActualLRPMutex.RUnlock()
	return fake.evacuateCrashedActualLRPArgsForCall[i].arg1, fake.evacuateCrashedActualLRPArgsForCall[i].arg2
}

func (fake *FakeEvacuationDB) EvacuateCrashedActualLRPReturns(result1 bool, result2 *models.Error) {
	fake.EvacuateCrashedActualLRPStub = nil
	fake.evacuateCrashedActualLRPReturns = struct {
		result1 bool
		result2 *models.Error
	}{result1, result2}
}

func (fake *FakeEvacuationDB) RemoveEvacuatingActualLRP(arg1 lager.Logger, arg2 *models.RemoveEvacuatingActualLRPRequest) *models.Error {
	fake.removeEvacuatingActualLRPMutex.Lock()
	fake.removeEvacuatingActualLRPArgsForCall = append(fake.removeEvacuatingActualLRPArgsForCall, struct {
		arg1 lager.Logger
		arg2 *models.RemoveEvacuatingActualLRPRequest
	}{arg1, arg2})
	fake.removeEvacuatingActualLRPMutex.Unlock()
	if fake.RemoveEvacuatingActualLRPStub != nil {
		return fake.RemoveEvacuatingActualLRPStub(arg1, arg2)
	} else {
		return fake.removeEvacuatingActualLRPReturns.result1
	}
}

func (fake *FakeEvacuationDB) RemoveEvacuatingActualLRPCallCount() int {
	fake.removeEvacuatingActualLRPMutex.RLock()
	defer fake.removeEvacuatingActualLRPMutex.RUnlock()
	return len(fake.removeEvacuatingActualLRPArgsForCall)
}

func (fake *FakeEvacuationDB) RemoveEvacuatingActualLRPArgsForCall(i int) (lager.Logger, *models.RemoveEvacuatingActualLRPRequest) {
	fake.removeEvacuatingActualLRPMutex.RLock()
	defer fake.removeEvacuatingActualLRPMutex.RUnlock()
	return fake.removeEvacuatingActualLRPArgsForCall[i].arg1, fake.removeEvacuatingActualLRPArgsForCall[i].arg2
}

func (fake *FakeEvacuationDB) RemoveEvacuatingActualLRPReturns(result1 *models.Error) {
	fake.RemoveEvacuatingActualLRPStub = nil
	fake.removeEvacuatingActualLRPReturns = struct {
		result1 *models.Error
	}{result1}
}

var _ db.EvacuationDB = new(FakeEvacuationDB)
