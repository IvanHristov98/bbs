// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bbs/db"
	"github.com/cloudfoundry-incubator/bbs/models"
	"github.com/pivotal-golang/lager"
)

type FakeCellDB struct {
	NewCellsLoaderStub        func(logger lager.Logger) db.CellsLoader
	newCellsLoaderMutex       sync.RWMutex
	newCellsLoaderArgsForCall []struct {
		logger lager.Logger
	}
	newCellsLoaderReturns struct {
		result1 db.CellsLoader
	}
	CellByIdStub        func(logger lager.Logger, cellId string) (*models.CellPresence, *models.Error)
	cellByIdMutex       sync.RWMutex
	cellByIdArgsForCall []struct {
		logger lager.Logger
		cellId string
	}
	cellByIdReturns struct {
		result1 *models.CellPresence
		result2 *models.Error
	}
}

func (fake *FakeCellDB) NewCellsLoader(logger lager.Logger) db.CellsLoader {
	fake.newCellsLoaderMutex.Lock()
	fake.newCellsLoaderArgsForCall = append(fake.newCellsLoaderArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.newCellsLoaderMutex.Unlock()
	if fake.NewCellsLoaderStub != nil {
		return fake.NewCellsLoaderStub(logger)
	} else {
		return fake.newCellsLoaderReturns.result1
	}
}

func (fake *FakeCellDB) NewCellsLoaderCallCount() int {
	fake.newCellsLoaderMutex.RLock()
	defer fake.newCellsLoaderMutex.RUnlock()
	return len(fake.newCellsLoaderArgsForCall)
}

func (fake *FakeCellDB) NewCellsLoaderArgsForCall(i int) lager.Logger {
	fake.newCellsLoaderMutex.RLock()
	defer fake.newCellsLoaderMutex.RUnlock()
	return fake.newCellsLoaderArgsForCall[i].logger
}

func (fake *FakeCellDB) NewCellsLoaderReturns(result1 db.CellsLoader) {
	fake.NewCellsLoaderStub = nil
	fake.newCellsLoaderReturns = struct {
		result1 db.CellsLoader
	}{result1}
}

func (fake *FakeCellDB) CellById(logger lager.Logger, cellId string) (*models.CellPresence, *models.Error) {
	fake.cellByIdMutex.Lock()
	fake.cellByIdArgsForCall = append(fake.cellByIdArgsForCall, struct {
		logger lager.Logger
		cellId string
	}{logger, cellId})
	fake.cellByIdMutex.Unlock()
	if fake.CellByIdStub != nil {
		return fake.CellByIdStub(logger, cellId)
	} else {
		return fake.cellByIdReturns.result1, fake.cellByIdReturns.result2
	}
}

func (fake *FakeCellDB) CellByIdCallCount() int {
	fake.cellByIdMutex.RLock()
	defer fake.cellByIdMutex.RUnlock()
	return len(fake.cellByIdArgsForCall)
}

func (fake *FakeCellDB) CellByIdArgsForCall(i int) (lager.Logger, string) {
	fake.cellByIdMutex.RLock()
	defer fake.cellByIdMutex.RUnlock()
	return fake.cellByIdArgsForCall[i].logger, fake.cellByIdArgsForCall[i].cellId
}

func (fake *FakeCellDB) CellByIdReturns(result1 *models.CellPresence, result2 *models.Error) {
	fake.CellByIdStub = nil
	fake.cellByIdReturns = struct {
		result1 *models.CellPresence
		result2 *models.Error
	}{result1, result2}
}

var _ db.CellDB = new(FakeCellDB)
