// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/db"
	"code.cloudfoundry.org/lager"
)

type FakeDomainDB struct {
	DomainsStub        func(logger lager.Logger) ([]string, error)
	domainsMutex       sync.RWMutex
	domainsArgsForCall []struct {
		logger lager.Logger
	}
	domainsReturns struct {
		result1 []string
		result2 error
	}
	UpsertDomainStub        func(lgger lager.Logger, domain string, ttl uint32) error
	upsertDomainMutex       sync.RWMutex
	upsertDomainArgsForCall []struct {
		lgger  lager.Logger
		domain string
		ttl    uint32
	}
	upsertDomainReturns struct {
		result1 error
	}
}

func (fake *FakeDomainDB) Domains(logger lager.Logger) ([]string, error) {
	fake.domainsMutex.Lock()
	fake.domainsArgsForCall = append(fake.domainsArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.domainsMutex.Unlock()
	if fake.DomainsStub != nil {
		return fake.DomainsStub(logger)
	} else {
		return fake.domainsReturns.result1, fake.domainsReturns.result2
	}
}

func (fake *FakeDomainDB) DomainsCallCount() int {
	fake.domainsMutex.RLock()
	defer fake.domainsMutex.RUnlock()
	return len(fake.domainsArgsForCall)
}

func (fake *FakeDomainDB) DomainsArgsForCall(i int) lager.Logger {
	fake.domainsMutex.RLock()
	defer fake.domainsMutex.RUnlock()
	return fake.domainsArgsForCall[i].logger
}

func (fake *FakeDomainDB) DomainsReturns(result1 []string, result2 error) {
	fake.DomainsStub = nil
	fake.domainsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainDB) UpsertDomain(lgger lager.Logger, domain string, ttl uint32) error {
	fake.upsertDomainMutex.Lock()
	fake.upsertDomainArgsForCall = append(fake.upsertDomainArgsForCall, struct {
		lgger  lager.Logger
		domain string
		ttl    uint32
	}{lgger, domain, ttl})
	fake.upsertDomainMutex.Unlock()
	if fake.UpsertDomainStub != nil {
		return fake.UpsertDomainStub(lgger, domain, ttl)
	} else {
		return fake.upsertDomainReturns.result1
	}
}

func (fake *FakeDomainDB) UpsertDomainCallCount() int {
	fake.upsertDomainMutex.RLock()
	defer fake.upsertDomainMutex.RUnlock()
	return len(fake.upsertDomainArgsForCall)
}

func (fake *FakeDomainDB) UpsertDomainArgsForCall(i int) (lager.Logger, string, uint32) {
	fake.upsertDomainMutex.RLock()
	defer fake.upsertDomainMutex.RUnlock()
	return fake.upsertDomainArgsForCall[i].lgger, fake.upsertDomainArgsForCall[i].domain, fake.upsertDomainArgsForCall[i].ttl
}

func (fake *FakeDomainDB) UpsertDomainReturns(result1 error) {
	fake.UpsertDomainStub = nil
	fake.upsertDomainReturns = struct {
		result1 error
	}{result1}
}

var _ db.DomainDB = new(FakeDomainDB)
