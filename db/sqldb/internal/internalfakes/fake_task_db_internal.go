// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"database/sql"
	"sync"

	"code.cloudfoundry.org/bbs/db/sqldb/helpers"
	"code.cloudfoundry.org/bbs/db/sqldb/internal"
	"code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/lager"
)

type FakeTaskDbInternal struct {
	CompleteTaskStub        func(logger lager.Logger, task *models.Task, failed bool, failureReason, result string, tx helpers.Tx) error
	completeTaskMutex       sync.RWMutex
	completeTaskArgsForCall []struct {
		logger        lager.Logger
		task          *models.Task
		failed        bool
		failureReason string
		result        string
		tx            helpers.Tx
	}
	completeTaskReturns struct {
		result1 error
	}
	completeTaskReturnsOnCall map[int]struct {
		result1 error
	}
	FetchTaskForUpdateStub        func(logger lager.Logger, taskGuid string, tx helpers.Tx) (*models.Task, error)
	fetchTaskForUpdateMutex       sync.RWMutex
	fetchTaskForUpdateArgsForCall []struct {
		logger   lager.Logger
		taskGuid string
		tx       helpers.Tx
	}
	fetchTaskForUpdateReturns struct {
		result1 *models.Task
		result2 error
	}
	fetchTaskForUpdateReturnsOnCall map[int]struct {
		result1 *models.Task
		result2 error
	}
	FetchTasksStub        func(logger lager.Logger, rows *sql.Rows, queryable helpers.Queryable, abortOnError bool) ([]*models.Task, []string, int, error)
	fetchTasksMutex       sync.RWMutex
	fetchTasksArgsForCall []struct {
		logger       lager.Logger
		rows         *sql.Rows
		queryable    helpers.Queryable
		abortOnError bool
	}
	fetchTasksReturns struct {
		result1 []*models.Task
		result2 []string
		result3 int
		result4 error
	}
	fetchTasksReturnsOnCall map[int]struct {
		result1 []*models.Task
		result2 []string
		result3 int
		result4 error
	}
	FetchTaskStub        func(logger lager.Logger, scanner helpers.RowScanner, queryable helpers.Queryable) (*models.Task, error)
	fetchTaskMutex       sync.RWMutex
	fetchTaskArgsForCall []struct {
		logger    lager.Logger
		scanner   helpers.RowScanner
		queryable helpers.Queryable
	}
	fetchTaskReturns struct {
		result1 *models.Task
		result2 error
	}
	fetchTaskReturnsOnCall map[int]struct {
		result1 *models.Task
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskDbInternal) CompleteTask(logger lager.Logger, task *models.Task, failed bool, failureReason string, result string, tx helpers.Tx) error {
	fake.completeTaskMutex.Lock()
	ret, specificReturn := fake.completeTaskReturnsOnCall[len(fake.completeTaskArgsForCall)]
	fake.completeTaskArgsForCall = append(fake.completeTaskArgsForCall, struct {
		logger        lager.Logger
		task          *models.Task
		failed        bool
		failureReason string
		result        string
		tx            helpers.Tx
	}{logger, task, failed, failureReason, result, tx})
	fake.recordInvocation("CompleteTask", []interface{}{logger, task, failed, failureReason, result, tx})
	fake.completeTaskMutex.Unlock()
	if fake.CompleteTaskStub != nil {
		return fake.CompleteTaskStub(logger, task, failed, failureReason, result, tx)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.completeTaskReturns.result1
}

func (fake *FakeTaskDbInternal) CompleteTaskCallCount() int {
	fake.completeTaskMutex.RLock()
	defer fake.completeTaskMutex.RUnlock()
	return len(fake.completeTaskArgsForCall)
}

func (fake *FakeTaskDbInternal) CompleteTaskArgsForCall(i int) (lager.Logger, *models.Task, bool, string, string, helpers.Tx) {
	fake.completeTaskMutex.RLock()
	defer fake.completeTaskMutex.RUnlock()
	return fake.completeTaskArgsForCall[i].logger, fake.completeTaskArgsForCall[i].task, fake.completeTaskArgsForCall[i].failed, fake.completeTaskArgsForCall[i].failureReason, fake.completeTaskArgsForCall[i].result, fake.completeTaskArgsForCall[i].tx
}

func (fake *FakeTaskDbInternal) CompleteTaskReturns(result1 error) {
	fake.CompleteTaskStub = nil
	fake.completeTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskDbInternal) CompleteTaskReturnsOnCall(i int, result1 error) {
	fake.CompleteTaskStub = nil
	if fake.completeTaskReturnsOnCall == nil {
		fake.completeTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.completeTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskDbInternal) FetchTaskForUpdate(logger lager.Logger, taskGuid string, tx helpers.Tx) (*models.Task, error) {
	fake.fetchTaskForUpdateMutex.Lock()
	ret, specificReturn := fake.fetchTaskForUpdateReturnsOnCall[len(fake.fetchTaskForUpdateArgsForCall)]
	fake.fetchTaskForUpdateArgsForCall = append(fake.fetchTaskForUpdateArgsForCall, struct {
		logger   lager.Logger
		taskGuid string
		tx       helpers.Tx
	}{logger, taskGuid, tx})
	fake.recordInvocation("FetchTaskForUpdate", []interface{}{logger, taskGuid, tx})
	fake.fetchTaskForUpdateMutex.Unlock()
	if fake.FetchTaskForUpdateStub != nil {
		return fake.FetchTaskForUpdateStub(logger, taskGuid, tx)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchTaskForUpdateReturns.result1, fake.fetchTaskForUpdateReturns.result2
}

func (fake *FakeTaskDbInternal) FetchTaskForUpdateCallCount() int {
	fake.fetchTaskForUpdateMutex.RLock()
	defer fake.fetchTaskForUpdateMutex.RUnlock()
	return len(fake.fetchTaskForUpdateArgsForCall)
}

func (fake *FakeTaskDbInternal) FetchTaskForUpdateArgsForCall(i int) (lager.Logger, string, helpers.Tx) {
	fake.fetchTaskForUpdateMutex.RLock()
	defer fake.fetchTaskForUpdateMutex.RUnlock()
	return fake.fetchTaskForUpdateArgsForCall[i].logger, fake.fetchTaskForUpdateArgsForCall[i].taskGuid, fake.fetchTaskForUpdateArgsForCall[i].tx
}

func (fake *FakeTaskDbInternal) FetchTaskForUpdateReturns(result1 *models.Task, result2 error) {
	fake.FetchTaskForUpdateStub = nil
	fake.fetchTaskForUpdateReturns = struct {
		result1 *models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskDbInternal) FetchTaskForUpdateReturnsOnCall(i int, result1 *models.Task, result2 error) {
	fake.FetchTaskForUpdateStub = nil
	if fake.fetchTaskForUpdateReturnsOnCall == nil {
		fake.fetchTaskForUpdateReturnsOnCall = make(map[int]struct {
			result1 *models.Task
			result2 error
		})
	}
	fake.fetchTaskForUpdateReturnsOnCall[i] = struct {
		result1 *models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskDbInternal) FetchTasks(logger lager.Logger, rows *sql.Rows, queryable helpers.Queryable, abortOnError bool) ([]*models.Task, []string, int, error) {
	fake.fetchTasksMutex.Lock()
	ret, specificReturn := fake.fetchTasksReturnsOnCall[len(fake.fetchTasksArgsForCall)]
	fake.fetchTasksArgsForCall = append(fake.fetchTasksArgsForCall, struct {
		logger       lager.Logger
		rows         *sql.Rows
		queryable    helpers.Queryable
		abortOnError bool
	}{logger, rows, queryable, abortOnError})
	fake.recordInvocation("FetchTasks", []interface{}{logger, rows, queryable, abortOnError})
	fake.fetchTasksMutex.Unlock()
	if fake.FetchTasksStub != nil {
		return fake.FetchTasksStub(logger, rows, queryable, abortOnError)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.fetchTasksReturns.result1, fake.fetchTasksReturns.result2, fake.fetchTasksReturns.result3, fake.fetchTasksReturns.result4
}

func (fake *FakeTaskDbInternal) FetchTasksCallCount() int {
	fake.fetchTasksMutex.RLock()
	defer fake.fetchTasksMutex.RUnlock()
	return len(fake.fetchTasksArgsForCall)
}

func (fake *FakeTaskDbInternal) FetchTasksArgsForCall(i int) (lager.Logger, *sql.Rows, helpers.Queryable, bool) {
	fake.fetchTasksMutex.RLock()
	defer fake.fetchTasksMutex.RUnlock()
	return fake.fetchTasksArgsForCall[i].logger, fake.fetchTasksArgsForCall[i].rows, fake.fetchTasksArgsForCall[i].queryable, fake.fetchTasksArgsForCall[i].abortOnError
}

func (fake *FakeTaskDbInternal) FetchTasksReturns(result1 []*models.Task, result2 []string, result3 int, result4 error) {
	fake.FetchTasksStub = nil
	fake.fetchTasksReturns = struct {
		result1 []*models.Task
		result2 []string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeTaskDbInternal) FetchTasksReturnsOnCall(i int, result1 []*models.Task, result2 []string, result3 int, result4 error) {
	fake.FetchTasksStub = nil
	if fake.fetchTasksReturnsOnCall == nil {
		fake.fetchTasksReturnsOnCall = make(map[int]struct {
			result1 []*models.Task
			result2 []string
			result3 int
			result4 error
		})
	}
	fake.fetchTasksReturnsOnCall[i] = struct {
		result1 []*models.Task
		result2 []string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeTaskDbInternal) FetchTask(logger lager.Logger, scanner helpers.RowScanner, queryable helpers.Queryable) (*models.Task, error) {
	fake.fetchTaskMutex.Lock()
	ret, specificReturn := fake.fetchTaskReturnsOnCall[len(fake.fetchTaskArgsForCall)]
	fake.fetchTaskArgsForCall = append(fake.fetchTaskArgsForCall, struct {
		logger    lager.Logger
		scanner   helpers.RowScanner
		queryable helpers.Queryable
	}{logger, scanner, queryable})
	fake.recordInvocation("FetchTask", []interface{}{logger, scanner, queryable})
	fake.fetchTaskMutex.Unlock()
	if fake.FetchTaskStub != nil {
		return fake.FetchTaskStub(logger, scanner, queryable)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchTaskReturns.result1, fake.fetchTaskReturns.result2
}

func (fake *FakeTaskDbInternal) FetchTaskCallCount() int {
	fake.fetchTaskMutex.RLock()
	defer fake.fetchTaskMutex.RUnlock()
	return len(fake.fetchTaskArgsForCall)
}

func (fake *FakeTaskDbInternal) FetchTaskArgsForCall(i int) (lager.Logger, helpers.RowScanner, helpers.Queryable) {
	fake.fetchTaskMutex.RLock()
	defer fake.fetchTaskMutex.RUnlock()
	return fake.fetchTaskArgsForCall[i].logger, fake.fetchTaskArgsForCall[i].scanner, fake.fetchTaskArgsForCall[i].queryable
}

func (fake *FakeTaskDbInternal) FetchTaskReturns(result1 *models.Task, result2 error) {
	fake.FetchTaskStub = nil
	fake.fetchTaskReturns = struct {
		result1 *models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskDbInternal) FetchTaskReturnsOnCall(i int, result1 *models.Task, result2 error) {
	fake.FetchTaskStub = nil
	if fake.fetchTaskReturnsOnCall == nil {
		fake.fetchTaskReturnsOnCall = make(map[int]struct {
			result1 *models.Task
			result2 error
		})
	}
	fake.fetchTaskReturnsOnCall[i] = struct {
		result1 *models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskDbInternal) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.completeTaskMutex.RLock()
	defer fake.completeTaskMutex.RUnlock()
	fake.fetchTaskForUpdateMutex.RLock()
	defer fake.fetchTaskForUpdateMutex.RUnlock()
	fake.fetchTasksMutex.RLock()
	defer fake.fetchTasksMutex.RUnlock()
	fake.fetchTaskMutex.RLock()
	defer fake.fetchTaskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskDbInternal) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.TaskDbInternal = new(FakeTaskDbInternal)
