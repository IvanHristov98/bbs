// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"os"
	"sync"
	"time"

	"code.cloudfoundry.org/bbs/metrics"
)

type FakeLRPStatMetronNotifier struct {
	RunStub        func(signals <-chan os.Signal, ready chan<- struct{}) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	RecordLRPConvergenceDurationStub        func(duration time.Duration)
	recordLRPConvergenceDurationMutex       sync.RWMutex
	recordLRPConvergenceDurationArgsForCall []struct {
		duration time.Duration
	}
	RecordFreshDomainsStub        func(domains []string)
	recordFreshDomainsMutex       sync.RWMutex
	recordFreshDomainsArgsForCall []struct {
		domains []string
	}
	RecordStateOfLRPsStub        func(unclaimed, claimed, running, crashed, crashingDesired int)
	recordStateOfLRPsMutex       sync.RWMutex
	recordStateOfLRPsArgsForCall []struct {
		unclaimed       int
		claimed         int
		running         int
		crashed         int
		crashingDesired int
	}
	RecordDesiredLRPsStub        func(desired int)
	recordDesiredLRPsMutex       sync.RWMutex
	recordDesiredLRPsArgsForCall []struct {
		desired int
	}
	RecordMissingLRPsStub        func(missing int)
	recordMissingLRPsMutex       sync.RWMutex
	recordMissingLRPsArgsForCall []struct {
		missing int
	}
	RecordExtraLRPsStub        func(extras int)
	recordExtraLRPsMutex       sync.RWMutex
	recordExtraLRPsArgsForCall []struct {
		extras int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLRPStatMetronNotifier) Run(signals <-chan os.Signal, ready chan<- struct{}) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}{signals, ready})
	fake.recordInvocation("Run", []interface{}{signals, ready})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(signals, ready)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runReturns.result1
}

func (fake *FakeLRPStatMetronNotifier) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RunArgsForCall(i int) (<-chan os.Signal, chan<- struct{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].signals, fake.runArgsForCall[i].ready
}

func (fake *FakeLRPStatMetronNotifier) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLRPStatMetronNotifier) RunReturnsOnCall(i int, result1 error) {
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLRPStatMetronNotifier) RecordLRPConvergenceDuration(duration time.Duration) {
	fake.recordLRPConvergenceDurationMutex.Lock()
	fake.recordLRPConvergenceDurationArgsForCall = append(fake.recordLRPConvergenceDurationArgsForCall, struct {
		duration time.Duration
	}{duration})
	fake.recordInvocation("RecordLRPConvergenceDuration", []interface{}{duration})
	fake.recordLRPConvergenceDurationMutex.Unlock()
	if fake.RecordLRPConvergenceDurationStub != nil {
		fake.RecordLRPConvergenceDurationStub(duration)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordLRPConvergenceDurationCallCount() int {
	fake.recordLRPConvergenceDurationMutex.RLock()
	defer fake.recordLRPConvergenceDurationMutex.RUnlock()
	return len(fake.recordLRPConvergenceDurationArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordLRPConvergenceDurationArgsForCall(i int) time.Duration {
	fake.recordLRPConvergenceDurationMutex.RLock()
	defer fake.recordLRPConvergenceDurationMutex.RUnlock()
	return fake.recordLRPConvergenceDurationArgsForCall[i].duration
}

func (fake *FakeLRPStatMetronNotifier) RecordFreshDomains(domains []string) {
	var domainsCopy []string
	if domains != nil {
		domainsCopy = make([]string, len(domains))
		copy(domainsCopy, domains)
	}
	fake.recordFreshDomainsMutex.Lock()
	fake.recordFreshDomainsArgsForCall = append(fake.recordFreshDomainsArgsForCall, struct {
		domains []string
	}{domainsCopy})
	fake.recordInvocation("RecordFreshDomains", []interface{}{domainsCopy})
	fake.recordFreshDomainsMutex.Unlock()
	if fake.RecordFreshDomainsStub != nil {
		fake.RecordFreshDomainsStub(domains)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordFreshDomainsCallCount() int {
	fake.recordFreshDomainsMutex.RLock()
	defer fake.recordFreshDomainsMutex.RUnlock()
	return len(fake.recordFreshDomainsArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordFreshDomainsArgsForCall(i int) []string {
	fake.recordFreshDomainsMutex.RLock()
	defer fake.recordFreshDomainsMutex.RUnlock()
	return fake.recordFreshDomainsArgsForCall[i].domains
}

func (fake *FakeLRPStatMetronNotifier) RecordStateOfLRPs(unclaimed int, claimed int, running int, crashed int, crashingDesired int) {
	fake.recordStateOfLRPsMutex.Lock()
	fake.recordStateOfLRPsArgsForCall = append(fake.recordStateOfLRPsArgsForCall, struct {
		unclaimed       int
		claimed         int
		running         int
		crashed         int
		crashingDesired int
	}{unclaimed, claimed, running, crashed, crashingDesired})
	fake.recordInvocation("RecordStateOfLRPs", []interface{}{unclaimed, claimed, running, crashed, crashingDesired})
	fake.recordStateOfLRPsMutex.Unlock()
	if fake.RecordStateOfLRPsStub != nil {
		fake.RecordStateOfLRPsStub(unclaimed, claimed, running, crashed, crashingDesired)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordStateOfLRPsCallCount() int {
	fake.recordStateOfLRPsMutex.RLock()
	defer fake.recordStateOfLRPsMutex.RUnlock()
	return len(fake.recordStateOfLRPsArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordStateOfLRPsArgsForCall(i int) (int, int, int, int, int) {
	fake.recordStateOfLRPsMutex.RLock()
	defer fake.recordStateOfLRPsMutex.RUnlock()
	return fake.recordStateOfLRPsArgsForCall[i].unclaimed, fake.recordStateOfLRPsArgsForCall[i].claimed, fake.recordStateOfLRPsArgsForCall[i].running, fake.recordStateOfLRPsArgsForCall[i].crashed, fake.recordStateOfLRPsArgsForCall[i].crashingDesired
}

func (fake *FakeLRPStatMetronNotifier) RecordDesiredLRPs(desired int) {
	fake.recordDesiredLRPsMutex.Lock()
	fake.recordDesiredLRPsArgsForCall = append(fake.recordDesiredLRPsArgsForCall, struct {
		desired int
	}{desired})
	fake.recordInvocation("RecordDesiredLRPs", []interface{}{desired})
	fake.recordDesiredLRPsMutex.Unlock()
	if fake.RecordDesiredLRPsStub != nil {
		fake.RecordDesiredLRPsStub(desired)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordDesiredLRPsCallCount() int {
	fake.recordDesiredLRPsMutex.RLock()
	defer fake.recordDesiredLRPsMutex.RUnlock()
	return len(fake.recordDesiredLRPsArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordDesiredLRPsArgsForCall(i int) int {
	fake.recordDesiredLRPsMutex.RLock()
	defer fake.recordDesiredLRPsMutex.RUnlock()
	return fake.recordDesiredLRPsArgsForCall[i].desired
}

func (fake *FakeLRPStatMetronNotifier) RecordMissingLRPs(missing int) {
	fake.recordMissingLRPsMutex.Lock()
	fake.recordMissingLRPsArgsForCall = append(fake.recordMissingLRPsArgsForCall, struct {
		missing int
	}{missing})
	fake.recordInvocation("RecordMissingLRPs", []interface{}{missing})
	fake.recordMissingLRPsMutex.Unlock()
	if fake.RecordMissingLRPsStub != nil {
		fake.RecordMissingLRPsStub(missing)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordMissingLRPsCallCount() int {
	fake.recordMissingLRPsMutex.RLock()
	defer fake.recordMissingLRPsMutex.RUnlock()
	return len(fake.recordMissingLRPsArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordMissingLRPsArgsForCall(i int) int {
	fake.recordMissingLRPsMutex.RLock()
	defer fake.recordMissingLRPsMutex.RUnlock()
	return fake.recordMissingLRPsArgsForCall[i].missing
}

func (fake *FakeLRPStatMetronNotifier) RecordExtraLRPs(extras int) {
	fake.recordExtraLRPsMutex.Lock()
	fake.recordExtraLRPsArgsForCall = append(fake.recordExtraLRPsArgsForCall, struct {
		extras int
	}{extras})
	fake.recordInvocation("RecordExtraLRPs", []interface{}{extras})
	fake.recordExtraLRPsMutex.Unlock()
	if fake.RecordExtraLRPsStub != nil {
		fake.RecordExtraLRPsStub(extras)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordExtraLRPsCallCount() int {
	fake.recordExtraLRPsMutex.RLock()
	defer fake.recordExtraLRPsMutex.RUnlock()
	return len(fake.recordExtraLRPsArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordExtraLRPsArgsForCall(i int) int {
	fake.recordExtraLRPsMutex.RLock()
	defer fake.recordExtraLRPsMutex.RUnlock()
	return fake.recordExtraLRPsArgsForCall[i].extras
}

func (fake *FakeLRPStatMetronNotifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.recordLRPConvergenceDurationMutex.RLock()
	defer fake.recordLRPConvergenceDurationMutex.RUnlock()
	fake.recordFreshDomainsMutex.RLock()
	defer fake.recordFreshDomainsMutex.RUnlock()
	fake.recordStateOfLRPsMutex.RLock()
	defer fake.recordStateOfLRPsMutex.RUnlock()
	fake.recordDesiredLRPsMutex.RLock()
	defer fake.recordDesiredLRPsMutex.RUnlock()
	fake.recordMissingLRPsMutex.RLock()
	defer fake.recordMissingLRPsMutex.RUnlock()
	fake.recordExtraLRPsMutex.RLock()
	defer fake.recordExtraLRPsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLRPStatMetronNotifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.LRPStatMetronNotifier = new(FakeLRPStatMetronNotifier)
