// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"os"
	"sync"
	"time"

	"code.cloudfoundry.org/bbs/metrics"
)

type FakeTaskStatMetronNotifier struct {
	RunStub        func(signals <-chan os.Signal, ready chan<- struct{}) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	TaskSucceededStub        func(cellID string)
	taskSucceededMutex       sync.RWMutex
	taskSucceededArgsForCall []struct {
		cellID string
	}
	TaskFailedStub        func(cellID string)
	taskFailedMutex       sync.RWMutex
	taskFailedArgsForCall []struct {
		cellID string
	}
	TaskStartedStub        func(cellID string)
	taskStartedMutex       sync.RWMutex
	taskStartedArgsForCall []struct {
		cellID string
	}
	SnapshotTaskStatsStub        func(pending, running, completed, resolved int, pruned, kicked uint64)
	snapshotTaskStatsMutex       sync.RWMutex
	snapshotTaskStatsArgsForCall []struct {
		pending   int
		running   int
		completed int
		resolved  int
		pruned    uint64
		kicked    uint64
	}
	TaskConvergenceStartedStub         func()
	taskConvergenceStartedMutex        sync.RWMutex
	taskConvergenceStartedArgsForCall  []struct{}
	TaskConvergenceDurationStub        func(duration time.Duration)
	taskConvergenceDurationMutex       sync.RWMutex
	taskConvergenceDurationArgsForCall []struct {
		duration time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskStatMetronNotifier) Run(signals <-chan os.Signal, ready chan<- struct{}) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}{signals, ready})
	fake.recordInvocation("Run", []interface{}{signals, ready})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(signals, ready)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runReturns.result1
}

func (fake *FakeTaskStatMetronNotifier) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeTaskStatMetronNotifier) RunArgsForCall(i int) (<-chan os.Signal, chan<- struct{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].signals, fake.runArgsForCall[i].ready
}

func (fake *FakeTaskStatMetronNotifier) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskStatMetronNotifier) RunReturnsOnCall(i int, result1 error) {
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskStatMetronNotifier) TaskSucceeded(cellID string) {
	fake.taskSucceededMutex.Lock()
	fake.taskSucceededArgsForCall = append(fake.taskSucceededArgsForCall, struct {
		cellID string
	}{cellID})
	fake.recordInvocation("TaskSucceeded", []interface{}{cellID})
	fake.taskSucceededMutex.Unlock()
	if fake.TaskSucceededStub != nil {
		fake.TaskSucceededStub(cellID)
	}
}

func (fake *FakeTaskStatMetronNotifier) TaskSucceededCallCount() int {
	fake.taskSucceededMutex.RLock()
	defer fake.taskSucceededMutex.RUnlock()
	return len(fake.taskSucceededArgsForCall)
}

func (fake *FakeTaskStatMetronNotifier) TaskSucceededArgsForCall(i int) string {
	fake.taskSucceededMutex.RLock()
	defer fake.taskSucceededMutex.RUnlock()
	return fake.taskSucceededArgsForCall[i].cellID
}

func (fake *FakeTaskStatMetronNotifier) TaskFailed(cellID string) {
	fake.taskFailedMutex.Lock()
	fake.taskFailedArgsForCall = append(fake.taskFailedArgsForCall, struct {
		cellID string
	}{cellID})
	fake.recordInvocation("TaskFailed", []interface{}{cellID})
	fake.taskFailedMutex.Unlock()
	if fake.TaskFailedStub != nil {
		fake.TaskFailedStub(cellID)
	}
}

func (fake *FakeTaskStatMetronNotifier) TaskFailedCallCount() int {
	fake.taskFailedMutex.RLock()
	defer fake.taskFailedMutex.RUnlock()
	return len(fake.taskFailedArgsForCall)
}

func (fake *FakeTaskStatMetronNotifier) TaskFailedArgsForCall(i int) string {
	fake.taskFailedMutex.RLock()
	defer fake.taskFailedMutex.RUnlock()
	return fake.taskFailedArgsForCall[i].cellID
}

func (fake *FakeTaskStatMetronNotifier) TaskStarted(cellID string) {
	fake.taskStartedMutex.Lock()
	fake.taskStartedArgsForCall = append(fake.taskStartedArgsForCall, struct {
		cellID string
	}{cellID})
	fake.recordInvocation("TaskStarted", []interface{}{cellID})
	fake.taskStartedMutex.Unlock()
	if fake.TaskStartedStub != nil {
		fake.TaskStartedStub(cellID)
	}
}

func (fake *FakeTaskStatMetronNotifier) TaskStartedCallCount() int {
	fake.taskStartedMutex.RLock()
	defer fake.taskStartedMutex.RUnlock()
	return len(fake.taskStartedArgsForCall)
}

func (fake *FakeTaskStatMetronNotifier) TaskStartedArgsForCall(i int) string {
	fake.taskStartedMutex.RLock()
	defer fake.taskStartedMutex.RUnlock()
	return fake.taskStartedArgsForCall[i].cellID
}

func (fake *FakeTaskStatMetronNotifier) SnapshotTaskStats(pending int, running int, completed int, resolved int, pruned uint64, kicked uint64) {
	fake.snapshotTaskStatsMutex.Lock()
	fake.snapshotTaskStatsArgsForCall = append(fake.snapshotTaskStatsArgsForCall, struct {
		pending   int
		running   int
		completed int
		resolved  int
		pruned    uint64
		kicked    uint64
	}{pending, running, completed, resolved, pruned, kicked})
	fake.recordInvocation("SnapshotTaskStats", []interface{}{pending, running, completed, resolved, pruned, kicked})
	fake.snapshotTaskStatsMutex.Unlock()
	if fake.SnapshotTaskStatsStub != nil {
		fake.SnapshotTaskStatsStub(pending, running, completed, resolved, pruned, kicked)
	}
}

func (fake *FakeTaskStatMetronNotifier) SnapshotTaskStatsCallCount() int {
	fake.snapshotTaskStatsMutex.RLock()
	defer fake.snapshotTaskStatsMutex.RUnlock()
	return len(fake.snapshotTaskStatsArgsForCall)
}

func (fake *FakeTaskStatMetronNotifier) SnapshotTaskStatsArgsForCall(i int) (int, int, int, int, uint64, uint64) {
	fake.snapshotTaskStatsMutex.RLock()
	defer fake.snapshotTaskStatsMutex.RUnlock()
	return fake.snapshotTaskStatsArgsForCall[i].pending, fake.snapshotTaskStatsArgsForCall[i].running, fake.snapshotTaskStatsArgsForCall[i].completed, fake.snapshotTaskStatsArgsForCall[i].resolved, fake.snapshotTaskStatsArgsForCall[i].pruned, fake.snapshotTaskStatsArgsForCall[i].kicked
}

func (fake *FakeTaskStatMetronNotifier) TaskConvergenceStarted() {
	fake.taskConvergenceStartedMutex.Lock()
	fake.taskConvergenceStartedArgsForCall = append(fake.taskConvergenceStartedArgsForCall, struct{}{})
	fake.recordInvocation("TaskConvergenceStarted", []interface{}{})
	fake.taskConvergenceStartedMutex.Unlock()
	if fake.TaskConvergenceStartedStub != nil {
		fake.TaskConvergenceStartedStub()
	}
}

func (fake *FakeTaskStatMetronNotifier) TaskConvergenceStartedCallCount() int {
	fake.taskConvergenceStartedMutex.RLock()
	defer fake.taskConvergenceStartedMutex.RUnlock()
	return len(fake.taskConvergenceStartedArgsForCall)
}

func (fake *FakeTaskStatMetronNotifier) TaskConvergenceDuration(duration time.Duration) {
	fake.taskConvergenceDurationMutex.Lock()
	fake.taskConvergenceDurationArgsForCall = append(fake.taskConvergenceDurationArgsForCall, struct {
		duration time.Duration
	}{duration})
	fake.recordInvocation("TaskConvergenceDuration", []interface{}{duration})
	fake.taskConvergenceDurationMutex.Unlock()
	if fake.TaskConvergenceDurationStub != nil {
		fake.TaskConvergenceDurationStub(duration)
	}
}

func (fake *FakeTaskStatMetronNotifier) TaskConvergenceDurationCallCount() int {
	fake.taskConvergenceDurationMutex.RLock()
	defer fake.taskConvergenceDurationMutex.RUnlock()
	return len(fake.taskConvergenceDurationArgsForCall)
}

func (fake *FakeTaskStatMetronNotifier) TaskConvergenceDurationArgsForCall(i int) time.Duration {
	fake.taskConvergenceDurationMutex.RLock()
	defer fake.taskConvergenceDurationMutex.RUnlock()
	return fake.taskConvergenceDurationArgsForCall[i].duration
}

func (fake *FakeTaskStatMetronNotifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.taskSucceededMutex.RLock()
	defer fake.taskSucceededMutex.RUnlock()
	fake.taskFailedMutex.RLock()
	defer fake.taskFailedMutex.RUnlock()
	fake.taskStartedMutex.RLock()
	defer fake.taskStartedMutex.RUnlock()
	fake.snapshotTaskStatsMutex.RLock()
	defer fake.snapshotTaskStatsMutex.RUnlock()
	fake.taskConvergenceStartedMutex.RLock()
	defer fake.taskConvergenceStartedMutex.RUnlock()
	fake.taskConvergenceDurationMutex.RLock()
	defer fake.taskConvergenceDurationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskStatMetronNotifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.TaskStatMetronNotifier = new(FakeTaskStatMetronNotifier)
